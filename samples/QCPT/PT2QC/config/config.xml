<?xml version="1.0" encoding="UTF-8"?>
<!--
    $Author$
    $HeadURL$
-->

<!--
 Copyright 2009 CollabNet, Inc. ("CollabNet")

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">

    <description>
    This wiring synchronizes a PT system with a QC system
    To get a bidirectional synchronization, just start the QC To PT scenario as well.
    </description>
    
    <bean class="org.openadaptor.core.jmx.MBeanServer">
		<description>
			Embed this in your config to expose jmx interface via http
			and rmi.
		</description>
		<constructor-arg value="${ccf.jmxPort}" />
	</bean>

	<bean id="PartialUpdateHospitalWriter" class="com.collabnet.ccf.core.config.HospitalFilter">
		<description>If we could only perform a partial update,
		this component will place the artifact in the hospital, 
		so it can be reprocessed later.</description>
		<property name="script">
			<value>
			var errorCode = oa_data.getRootElement().selectSingleNode("@errorCode").getText();
			errorCode != "objectLocked";
			</value>
		</property>
		<property name="exceptionMessage" value="Artifact has been locked in QC, so we only partially updated it and moving unprocessed comments to the hospital for later re-processing." />
	</bean>

	<bean id="SystemUtil" class="org.openadaptor.util.SystemUtil">
		<description>
			Embed this in your config to expose useful management bean.
		</description>
	</bean>

	<bean id="LogAdmin"
		class="org.openadaptor.thirdparty.log4j.LogAdmin">
		<description>
			Embed this in your config to expose log4j management.
		</description>
	</bean>

    <bean id="SystemPropertyConfigurer"
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="ignoreResourceNotFound" value="false" />
        <property name="systemPropertiesMode">
            <bean
                id="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer.SYSTEM_PROPERTIES_MODE_OVERRIDE"
                class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean" />
        </property>
        <property name="locations">
            <description>
                Properties configured in these property files will be
                imported into the wiring file. The file ccf.properties
                contains the properties for the CCF core components.
            </description>
            <list>
                <value>classpath:ccf.properties</value>
                <value>classpath:cee.properties</value>
                <value>classpath:qc.properties</value>
            </list>
        </property>
    </bean>
    <bean id="PT2QC" class="org.openadaptor.core.adaptor.Adaptor">
        <property name="messageProcessor" ref="Router" />
    </bean>

    <bean id="Router" class="org.openadaptor.core.router.Router">
        <description>
            The processMap property of this Router bean configures the
            processors that are wired together to ship the artifacts
            from the source repository to the target repository.
        </description>
        <property name="processMap">
            <map>
                <entry key-ref="SynchronizationStatusPollingReaderPT2QC"
                    value-ref="PTReader" />
                <!-- This plugs in the polling hospital -->
				<entry key-ref="PTReader">
					<list>
						<ref bean="HospitalUpdatorSQLConverterReprocessed" />
						<ref bean="QCEntityService" />
					</list>
				</entry>
                <entry key-ref="QCEntityService" value-ref="QCTransformer" />
                <entry key-ref="QCTransformer" value-ref="QCWriter" />
                <entry key-ref="QCWriter"
                    value-ref="SynchronizationStatusAndIdentityMappingTableUpdaterPT2QC" />
                    
                <!-- This plugs in the polling hospital -->
				<entry key-ref="SynchronizationStatusAndIdentityMappingTableUpdaterPT2QC">
					<list>
						<ref bean="HospitalUpdatorSQLConverterFixed"/>
						<ref bean="PartialUpdateHospitalWriter" />
					</list>
				</entry>
					
				<!-- This plugs in the polling hospital -->
				<entry key-ref="HospitalUpdatorSQLConverterReprocessed"
					value-ref="HospitalUpdator" />
				
				<!-- This plugs in the polling hospital -->
				<entry key-ref="HospitalUpdatorSQLConverterFixed" value-ref="HospitalUpdator" />

                <!-- Exception processors -->
        		<entry key-ref="ExceptionConvertor" value-ref="HospitalWriter"/>
            </map>
        </property>
        <!-- <property name="exceptionProcessor" ref="ExceptionHandler" />  -->
		<property name="exceptionProcessor" ref="ExceptionConvertor"/><property name="metricsEnabled" value="true"/>
    </bean>

    <bean id="ExceptionConvertor" class="com.collabnet.ccf.core.hospital.CCFExceptionToOrderedMapConvertor"><property name="logMessageTemplate" value="${ccf.logMessageTemplate}" /><property name="timestampFormat" value="yyyy-MM-dd HH:mm:ss zzz"/><property name="onlyQuarantineGenericArtifacts" value="true"/>
		<property name="adaptor" ref="PT2QC"/>
	</bean>

	<bean id="HospitalWriter" class="org.openadaptor.auxil.connector.jdbc.writer.JDBCWriteConnector">
		<property name="jdbcConnection" ref="HospitalJDBCConnection" />
		<property name="writer">
			<bean
				class="org.openadaptor.auxil.connector.jdbc.writer.map.MapTableWriter">
				<property name="tableName" value="HOSPITAL" />
			</bean>
		</property>
	</bean>

    <bean id="HospitalJDBCConnection"
		class="org.openadaptor.auxil.connector.jdbc.JDBCConnection" scope="prototype">
		<description>
			This defines jdbc connection that will be used by the
			HospitalWriter
		</description>
		<property name="driver" value="${ccf.db.driver}" />
		<property name="url" value="${ccf.db.url}" />
		<property name="username" value="${ccf.db.username}" />
		<property name="password" value="${ccf.db.password}" />
	</bean>

    <bean id="SynchronizationStatusPollingReaderPT2QC"
        class="com.collabnet.ccf.core.test.plugins.SimpleLoopingPollingReadConnector">
        <description>
            This polling connector polls the CCF database tables that
            contain the repository mapping and the synchronization info
            and feeds the details to the source repository reader piped
            down the line. Please refer the processMap configuration for
            the Router bean.

            In this case this polling reader reads the synchronization
            status using the database read connector configured in the
            property delegate.

            Polling interval seconds is configured as 0 to indicate that
            the polling reader should read from the database read
            connector continuously without and pauses in between.
        </description>
        <property name="pollLimit" value="-1" />
        <property name="delegate"
            ref="SynchronizationStatusDatabaseReaderPT2QC" />
        <property name="pollIntervalSecs" value="0" /><property name="reconnectDelegateBetweenPolls" value="false"/>
    </bean>

    <bean id="SynchronizationStatusDatabaseReaderPT2QC"
        class="org.openadaptor.auxil.connector.jdbc.reader.JDBCReadConnector">
        <description>
            This is the JDBC read connector used by the
            SynchronizationStatusPollingReader to read the repository
            mapping and the synchronization info.
        </description>
        <property name="jdbcConnection" ref="JDBCConnectionPT2QC" />
        <!-- batch size of 0 or less means process all rows in one message batch. -->
        <!-- batch size of one means process one row per message and so on -->
        <property name="batchSize" value="1" />
        <property name="resultSetConverter"
            ref="SynchronizationStatusXMLConverter" />
        <property name="sql">
            <value>SELECT SOURCE_REPOSITORY_ID, SOURCE_REPOSITORY_KIND, SOURCE_SYSTEM_ID, SOURCE_SYSTEM_KIND, TARGET_REPOSITORY_ID, TARGET_REPOSITORY_KIND, TARGET_SYSTEM_ID, TARGET_SYSTEM_KIND, LAST_SOURCE_ARTIFACT_MODIFICATION_DATE, LAST_SOURCE_ARTIFACT_VERSION, LAST_SOURCE_ARTIFACT_ID, CONFLICT_RESOLUTION_PRIORITY, SOURCE_SYSTEM_TIMEZONE, TARGET_SYSTEM_TIMEZONE, SOURCE_SYSTEM_ENCODING, TARGET_SYSTEM_ENCODING FROM SYNCHRONIZATION_STATUS WHERE SOURCE_SYSTEM_KIND='PT' AND TARGET_SYSTEM_KIND='QC'</value>
        </property>
    </bean>

    <bean id="QCWriter" class="com.collabnet.ccf.pi.qc.v90.QCWriter">
        <description>
            This QCWriter will write the data contained in the incoming
            document to QC.
        </description>
        <property name="serverUrl" value="${qc.system.1.url}" />
        <property name="userName" value="${qc.system.1.username}" />
        <property name="password" value="${qc.system.1.password}" />
        <property name="connectionManager" ref="QCConnectionManager"></property>
        <property name="resyncUserName" value="${qc.system.1.resync.username}"></property>
        <property name="resyncPassword" value="${qc.system.1.resync.password}"></property>
        <property name="immediatelyQuarantineLockedDefects" value="true"/>
        <property name="preserveSemanticallyUnchangedHTMLFieldValues" value="true"/>
    </bean>
    <bean id="QCConnectionManager"
        class="com.collabnet.ccf.core.eis.connection.ConnectionManager">
        <!-- Please set the number of connections to the number of project mappings you have -->
        <property name="maxConnectionsPerPool" value="5"></property>
        <property name="maxIdleTimeForConnection" value="600000" />
        <property name="scavengerInterval" value="120000"></property>
        <property name="connectionFactory" ref="QCConnectionFactory"></property>
        <property name="useStandardTimeoutHandlingCode" value="true"/>
        <property name="enableReloginAfterSessionTimeout" value="true"/>
        <property name="enableRetryAfterNetworkTimeout" value="true"/>
    </bean>
    <bean id="QCConnectionFactory"
        class="com.collabnet.ccf.pi.qc.v90.QCConnectionFactory">
    </bean>

    <bean id="JDBCConnectionPT2QC"
        class="org.openadaptor.auxil.connector.jdbc.JDBCConnection" scope="prototype">
        <description>
            This defines jdbc connection that will be used by
            all components that read from PT and write to QC
        </description>
        <property name="driver" value="${ccf.db.driver}" />
        <property name="url" value="${ccf.db.url}" />
        <property name="username" value="${ccf.db.username}" />
        <property name="password" value="${ccf.db.password}" />
    </bean>

    <bean id="SynchronizationStatusXMLConverter"
        class="org.openadaptor.auxil.connector.jdbc.reader.xml.ResultSetToXMLConverter">
        <description>
            Converts the synchronization info in the database into XML
            sync info document.
        </description>
        <property name="convertToString" value="false" />
        <property name="rootElement" value="EmptySyncInf" />
    </bean>

    <bean id="PTReader"
        class="com.collabnet.ccf.pi.cee.pt.v50.ProjectTrackerReader">
        <description>
            This reader reads the modified artifacts in the PT
            system's tracker configured in the ${cee.server.1.url} and
            the sync info tables. It also reads all the related
            dependent artifact details and converts them into Generic
            Artifact XML document format and sends to the next component
            in the pipeline. The next component in the piple line may be
            an XSLT transformer component such as
            com.collabnet.ccf.core.transformer.XsltProcessor or an
            EntityService component depending on the target QC tracker
            needs the data to be translated to fit into its fields or
            not.
        </description>
        <property name="shipCommentsWithCreationDate" value ="false"/>
        <property name="username" value="${cee.server.1.username}" />
        <property name="resyncUserName" value="${cee.server.1.resync.username}"></property>
        <property name="connectorUserDisplayName" value="${cee.server.1.connector.user.displayName}" />
        <property name="resyncUserDisplayName" value="${cee.server.1.resync.user.displayName}"></property>
        <property name="password" value="${cee.server.1.password}" />
        <property name="serverUrl" value="${cee.server.1.url}" />
        <property name="connectionManager"
            ref="CEEConnectionManager">
        </property>
        <property name="sleepInterval" value="1000"></property>
        <property name="maxAttachmentSizePerArtifact"
            value="${cee.max.attachmentsize.per.artifact}" />
        <!-- Let this restart every 6 hours -->
		<property name="autoRestartPeriod" value="21600"/>
		<property name="shipAttachments" value="true"/>
		
		<!-- This plugs in the polling hospital -->
		<property name="hospitalDatabaseReader" ref="HospitalDatabaseExtractor" />
    </bean>

    <bean id="CEEConnectionManager"
        class="com.collabnet.ccf.core.eis.connection.ConnectionManager">
        <description>
            The connection manager implements a connection pooling
            mechanism where the connections to multiple systems are
            cached for the readers and writers to retrieve when needed.
            Before returning the connection to the client the connection
            manager checks if the connection is live and only returns
            valid connections. It assigns and manages one pool per
            repository.
        </description>
        <property name="maxConnectionsPerPool" value="5"></property>
        <property name="maxIdleTimeForConnection" value="600000" />
        <property name="scavengerInterval" value="120000"></property>
        <property name="connectionFactory"
            ref="CEEConnectionFactory">
        </property>
        <property name="useStandardTimeoutHandlingCode" value="true"/>
        <property name="enableReloginAfterSessionTimeout" value="true"/>
        <property name="enableRetryAfterNetworkTimeout" value="true"/>
    </bean>

    <bean id="CEEConnectionFactory"
        class="com.collabnet.ccf.pi.cee.pt.v50.CollabNetConnectionFactory">
        <description>
            This bean is an implementation of the
            com.collabnet.ccf.core.eis.connection.ConnectionFactory
            interface. It is responsible to create and close an
            connection for a given repository.
        </description>
        <property name="proxyUsed" value="false"></property>
        <!-- <property name="proxyHost" value="proxyHostName"></property>
        <property name="proxyPort" value="proxy port number"></property>
        <property name="proxyType" value="HTTP/SOCKS"></property> -->
    </bean>

     <bean id="QCEntityService"
        class="com.collabnet.ccf.core.EntityService">
        <description>
            This component is responsible for determining if the current
            artifact that is being shipped is to be created or updated
            in the target QC system. It determines the artifact action
            by checking if the artifact has an identity mapping already.
            If the identity mapping does not exist then the
            EntityService marks this artifact action as create otherwise
            update. Please refer the
            SynchronizationStatusAndIdentityMappingTableUpdater
            component.
        </description>
        <property name="identityMappingDatabaseReader"
            ref="IndentityMappingDatabaseReaderPT2QC" />
        <property name="hospitalDatabaseReader" ref="HospitalDatabaseReaderPT2QC"/>
		<property name="skipNewerVersionsOfQuarantinedArtifacts" value="false"/><property name="alwaysPassResynchedArtifacts" value="false"/>
		<property name="identityMapEventWaitCount" value="8"/>
        <property name="identityMapEventWaitTime" value="500"/>
		<property name="alwaysPassPartialArtifacts" value="true"/>
    </bean>

    <bean id="HospitalDatabaseReaderPT2QC"
		class="org.openadaptor.auxil.connector.jdbc.reader.JDBCReadConnector">
		<description>
			This database reader component finds out whether an artifact has been
			quarantined in the hospital
		</description>
		<property name="jdbcConnection" ref="JDBCConnectionPT2QC" />
		<!-- batch size of 0 or less means process all rows in one message batch. -->
		<!-- batch size of one means process one row per message and so on -->
		<property name="batchSize" value="0" />
		<property name="sql">
			<value>SELECT ID, SOURCE_LAST_MODIFICATION_TIME, SOURCE_ARTIFACT_VERSION FROM HOSPITAL WHERE SOURCE_SYSTEM_ID='?' AND SOURCE_REPOSITORY_ID='?' AND TARGET_SYSTEM_ID='?' AND TARGET_REPOSITORY_ID='?' AND SOURCE_ARTIFACT_ID='?' AND ARTIFACT_TYPE='?' AND REPROCESSED != TRUE AND FIXED != TRUE AND ERROR_CODE IS NOT NULL</value>
		</property>
	</bean>

    <bean id="QCTransformer" class="com.collabnet.ccf.core.transformer.DynamicXsltProcessor">
		<description>The xsltDir specifies the directory in which the xsl files are contained. The naming conventions
		for the xsl files need to be followed.
		Name of an xsl file should be: sourceSystem+sourceRepository+targetSystem+targetRepository.xsl
		</description>
		<property name="xsltDir" value="xslt/" />
		<property name="scripts">
		<list>
			<value>
			var artifactType = oa_data.selectSingleNode("@artifactType").getText();
			if (artifactType != "plainArtifact") {
				oa_data=null;
			}
			else {
				var sourceRepositoryKind = oa_data.selectSingleNode("@sourceRepositoryKind").getText();
				if (!sourceRepositoryKind.endsWith(".xsl")) {
					oa_data=null;
				}
				else {
					oa_data=sourceRepositoryKind+"";
				}
			}
			</value>
			<value>
			var artifactType = oa_data.selectSingleNode("@artifactType").getText();
			if (artifactType != "plainArtifact") {
				oa_data=null;
			}
			else {
				var sourceSystem = oa_data.selectSingleNode("@sourceSystemId").getText().replace(":","-");
				var targetSystem = oa_data.selectSingleNode("@targetSystemId").getText().replace(":","-");
				var sourceRepository = oa_data.selectSingleNode("@sourceRepositoryId").getText().replace(":","-");
				var targetRepository = oa_data.selectSingleNode("@targetRepositoryId").getText().replace(":","-");
				var sourceRepositoryKind = oa_data.selectSingleNode("@sourceRepositoryKind").getText();
				if (!sourceRepositoryKind.endsWith(".xsl")) {
					oa_data=sourceSystem+"+"+sourceRepository+"+"+targetSystem+"+"+targetRepository+".xsl";
				}
				else {
					oa_data="Graphical+"+sourceSystem+"+"+sourceRepository+"+"+targetSystem+"+"+targetRepository+".xsl";
				}
			}
			</value>
			<value>
			var artifactType = oa_data.selectSingleNode("@artifactType").getText();
			if (artifactType != "plainArtifact") {
				oa_data=null;
			}
			else {
				var targetRepositoryKind = oa_data.selectSingleNode("@targetRepositoryKind").getText();
				if (!targetRepositoryKind.endsWith(".xsl")) {
					oa_data=null;
				}
				else {
					oa_data=targetRepositoryKind+"";
				}
			}
			</value>
		</list>
		</property>
	</bean>

    <bean id="SynchronizationStatusAndIdentityMappingTableUpdaterPT2QC"
        class="com.collabnet.ccf.core.config.MappingDBUpdater">
        <description>
            This component is responsible for creating the identity
            mapping for newly created artifacts in the target system. It
            also updates the synchronization status for a particular
            repository. For CEE systems the synchronization info is the
            last modified time of the last shipped artifact. If the
            EntityService determines the artifact action as create (that
            is this artifact is a new artifact in the source system and
            doesn't have its identity mapping filled in the Sync info
            tables) then the writer component creates the artifact in
            the target system and populates the target artifact id in
            the Generic Artifact XML. The
            SynchronizationStatusAndIdentityMappingTableUpdater then
            takes the target artifact id and creates an identity mapping
            entry for the source and target artifact ids.
        </description>
        <property name="synchronizationStatusDatabaseUpdater"
            ref="SynchronizationStatusDatabaseUpdaterPT2QC">
        </property>
        <property name="identityMappingDatabaseReader"
            ref="IndentityMappingDatabaseReaderPT2QC" />
        <property name="identityMappingDatabaseUpdater"
            ref="IdentityMappingDatabaseUpdaterPT2QC" />
        <property name="identityMappingDatabaseInserter"
            ref="IdentityMappingDatabaseInserterPT2QC">
        </property>
    </bean>

    <bean id="IndentityMappingDatabaseReaderPT2QC"
        class="org.openadaptor.auxil.connector.jdbc.reader.JDBCReadConnector">
        <description>
            This database reader component reads the target artifact id
            from the database for a given source artifact id and the
            target repository and system information.
        </description>
        <property name="jdbcConnection" ref="JDBCConnectionPT2QC" />
        <property name="batchSize" value="0" />
        <property name="sql">
            <value>SELECT TARGET_ARTIFACT_ID, SOURCE_LAST_MODIFICATION_TIME, SOURCE_ARTIFACT_VERSION, TARGET_ARTIFACT_VERSION FROM IDENTITY_MAPPING WHERE SOURCE_SYSTEM_ID='?' AND SOURCE_REPOSITORY_ID='?' AND TARGET_SYSTEM_ID='?' AND TARGET_REPOSITORY_ID='?' AND SOURCE_ARTIFACT_ID='?' AND ARTIFACT_TYPE='?'</value>
        </property>
    </bean>

    <bean id="IdentityMappingDatabaseInserterPT2QC"
        class="org.openadaptor.auxil.connector.jdbc.writer.JDBCWriteConnector">
        <description>
            This component updates the synchronization status for the
            current artifact.
        </description>
        <property name="writer" ref="IdentityMappingTableInserter"></property>
        <property name="jdbcConnection" ref="JDBCConnectionPT2QC"></property>
    </bean>

    <bean id="IdentityMappingTableInserter"
        class="org.openadaptor.auxil.connector.jdbc.writer.map.MapTableWriter">
        <description>
            This is the writer object that writes the artifact mapping
            information into the database table.
        </description>
        <property name="tableName" value="IDENTITY_MAPPING"></property>
        <property name="outputColumns">
            <list>
                <value>SOURCE_SYSTEM_ID</value>
                <value>SOURCE_REPOSITORY_ID</value>
                <value>TARGET_SYSTEM_ID</value>
                <value>TARGET_REPOSITORY_ID</value>
                <value>SOURCE_SYSTEM_KIND</value>
                <value>SOURCE_REPOSITORY_KIND</value>
                <value>TARGET_SYSTEM_KIND</value>
                <value>TARGET_REPOSITORY_KIND</value>
                <value>SOURCE_ARTIFACT_ID</value>
                <value>TARGET_ARTIFACT_ID</value>
                <value>SOURCE_LAST_MODIFICATION_TIME</value>
                <value>TARGET_LAST_MODIFICATION_TIME</value>
                <value>SOURCE_ARTIFACT_VERSION</value>
                <value>TARGET_ARTIFACT_VERSION</value>
                <value>ARTIFACT_TYPE</value>
                <value>DEP_CHILD_SOURCE_ARTIFACT_ID</value>
                <value>DEP_CHILD_SOURCE_REPOSITORY_ID</value>
                <value>DEP_CHILD_SOURCE_REPOSITORY_KIND</value>
                <value>DEP_CHILD_TARGET_ARTIFACT_ID</value>
                <value>DEP_CHILD_TARGET_REPOSITORY_ID</value>
                <value>DEP_CHILD_TARGET_REPOSITORY_KIND</value>
                <value>DEP_PARENT_SOURCE_ARTIFACT_ID</value>
                <value>DEP_PARENT_SOURCE_REPOSITORY_ID</value>
                <value>DEP_PARENT_SOURCE_REPOSITORY_KIND</value>
                <value>DEP_PARENT_TARGET_ARTIFACT_ID</value>
                <value>DEP_PARENT_TARGET_REPOSITORY_ID</value>
                <value>DEP_PARENT_TARGET_REPOSITORY_KIND</value>
            </list>
        </property>
    </bean>

    <bean id="IdentityMappingDatabaseUpdaterPT2QC"
        class="org.openadaptor.auxil.connector.jdbc.writer.JDBCWriteConnector">
        <property name="writer" ref="IdentityMappingTableUpdater"></property>
        <property name="jdbcConnection" ref="JDBCConnectionPT2QC"></property>
    </bean>

    <bean id="IdentityMappingTableUpdater"
        class="com.collabnet.ccf.core.db.MapTableUpdater">
        <description>
            This is the writer object that writes the artifact mapping
            information into the database table.
        </description>
        <property name="tableName" value="IDENTITY_MAPPING"></property>
        <property name="sql"
            value="UPDATE IDENTITY_MAPPING SET SOURCE_LAST_MODIFICATION_TIME=?, TARGET_LAST_MODIFICATION_TIME=?, SOURCE_ARTIFACT_VERSION=?, TARGET_ARTIFACT_VERSION=? WHERE SOURCE_SYSTEM_ID=? AND SOURCE_REPOSITORY_ID=? AND TARGET_SYSTEM_ID=? AND TARGET_REPOSITORY_ID=? AND SOURCE_ARTIFACT_ID=? AND ARTIFACT_TYPE=?">
        </property>
        <property name="outputColumns">
            <list>
                <value>SOURCE_LAST_MODIFICATION_TIME</value>
                <value>TARGET_LAST_MODIFICATION_TIME</value>
                <value>SOURCE_ARTIFACT_VERSION</value>
                <value>TARGET_ARTIFACT_VERSION</value>
                <value>SOURCE_SYSTEM_ID</value>
                <value>SOURCE_REPOSITORY_ID</value>
                <value>TARGET_SYSTEM_ID</value>
                <value>TARGET_REPOSITORY_ID</value>
                <value>SOURCE_ARTIFACT_ID</value>
                <value>ARTIFACT_TYPE</value>
            </list>
        </property>
    </bean>
    <bean id="SynchronizationStatusDatabaseUpdaterPT2QC"
        class="org.openadaptor.auxil.connector.jdbc.writer.JDBCWriteConnector">
        <property name="writer"
            ref="SynchronizationStatusTableUpdater">
        </property>
        <property name="jdbcConnection" ref="JDBCConnectionPT2QC"></property>
    </bean>

    <bean id="SynchronizationStatusTableUpdater"
        class="com.collabnet.ccf.core.db.MapTableUpdater">
        <description>
            This is the writer object that writes the artifact mapping
            information into the database table.
        </description>
        <property name="tableName" value="SYNCHRONIZATION_STATUS"></property>
        <property name="sql" value="UPDATE SYNCHRONIZATION_STATUS SET LAST_SOURCE_ARTIFACT_MODIFICATION_DATE=?, LAST_SOURCE_ARTIFACT_VERSION=?, LAST_SOURCE_ARTIFACT_ID=? WHERE SOURCE_SYSTEM_ID=? AND SOURCE_REPOSITORY_ID=? AND TARGET_SYSTEM_ID=? AND TARGET_REPOSITORY_ID=? "></property>
        <property name="outputColumns">
            <list>
                <value>LAST_SOURCE_ARTIFACT_MODIFICATION_DATE</value>
                <value>LAST_SOURCE_ARTIFACT_VERSION</value>
                <value>LAST_SOURCE_ARTIFACT_ID</value>
                <value>SOURCE_SYSTEM_ID</value>
                <value>SOURCE_REPOSITORY_ID</value>
                <value>TARGET_SYSTEM_ID</value>
                <value>TARGET_REPOSITORY_ID</value>
            </list>
        </property>
    </bean>
    
    <!-- Following components are for polling hospital -->
	<bean id="HospitalUpdatorSQLConverterFixed" class="org.openadaptor.auxil.processor.script.ScriptProcessor">
		<description>
			This defines the SQL update statement to delete the
			hospital data base for replayed artifacts.
		</description>
		<!--
			<property name="script"> <value>oa_data = "UPDATE HOSPITAL SET FIXED
			= TRUE WHERE ID = '" +
			oa_data.getRootElement().selectSingleNode("@transactionId").getText()
			+ "'";</value> </property>
		-->
		<property name="script">
			<value>
			var transactionId = oa_data.getRootElement().selectSingleNode("@transactionId").getText();
			if (transactionId == "unknown") transactionId = "-1";
			oa_data = "DELETE FROM HOSPITAL WHERE ID = '" + transactionId + "'";
			</value>
		</property>
	</bean>
	<bean id="HospitalUpdatorSQLConverterReprocessed" class="org.openadaptor.auxil.processor.script.ScriptProcessor">
		<description>
			This defines the SQL update statement to update the
			hospital data base.
		</description>
		<property name="script">
			<value>
			var transactionId = oa_data.getRootElement().selectSingleNode("@transactionId").getText();
			if (transactionId == "unknown") transactionId = "-1";
			oa_data = "UPDATE HOSPITAL SET REPROCESSED = TRUE WHERE ID = '" + transactionId + "'";
			</value>
		</property>
	</bean>
	<bean id="HospitalUpdator"
		class="org.openadaptor.auxil.connector.jdbc.writer.JDBCWriteConnector">
		<description>
			This component will update the hospitalized artifacts
		</description>
		<property name="jdbcConnection" ref="HospitalJDBCConnection" />
	</bean>
	<bean id="HospitalDatabaseExtractor"
		class="org.openadaptor.auxil.connector.jdbc.reader.JDBCReadConnector">
		<description>
			This database reader component extracts quarantined artifacts from
			the hospital that are ready to be replayed
		</description>
		<property name="jdbcConnection" ref="HospitalJDBCConnection" />
		<!-- batch size of one means process one row per message and so on -->
		<property name="batchSize" value="0" />
		<property name="sql">
			<value>SELECT ID, GENERIC_ARTIFACT FROM HOSPITAL WHERE REPROCESSED = FALSE AND ERROR_CODE = 'replay' AND SOURCE_SYSTEM_ID = '?' and SOURCE_REPOSITORY_ID = '?' AND TARGET_SYSTEM_ID = '?' and TARGET_REPOSITORY_ID = '?' ORDER BY ID ASC LIMIT 1</value>
		</property>
	</bean>
	
	<bean id="mBeanExporter" class="org.springframework.jmx.export.MBeanExporter">
		<property name="beans">
			<map>
				<entry key="CCF:name=AbstractReader" value-ref="PTReader"/>
			</map>
		</property>
		<property name="assembler" ref="assembler"/>
	</bean>
	
	<bean id="assembler" class="org.springframework.jmx.export.assembler.MethodNameBasedMBeanInfoAssembler">
		<property name="managedMethods">
			<list>
				<value>getNumberOfWaitingArtifacts</value>
			</list>
		</property>
	</bean>
</beans>
