<?xml version="1.0" encoding="UTF-8"?>
<!-- 
$Author$
$HeadURL$
 -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">
	<description>
		<![CDATA[    
  This sample exports the tracker artifacts from an SFEE system into
  a database table.
    
  You need the following in your classpath
  
    lib
    lib/openadaptor.jar
    lib/openadaptor-spring.jar
    lib/openadaptor-depends.jar
  ]]>
	</description>
	<bean id="SystemPropertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="ignoreResourceNotFound" value="false" />
		<property name="systemPropertiesMode">
			<bean
				id="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer.SYSTEM_PROPERTIES_MODE_OVERRIDE"
				class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean" />
		</property>
		<property name="locations">
			<description>
				Properties configured in these property files will be imported into the wiring file.
				The file ccf.properties contains the properties for the CCF core components.
				sfee.properties file contains the properties for the SFEE plugin classes.
			</description>
			<list>
				<value>classpath:ccf.properties</value>
				<value>classpath:sfee.properties</value>
			</list>
		</property>
	</bean>
	<bean id="Adaptor" class="org.openadaptor.core.adaptor.Adaptor">
		<property name="messageProcessor" ref="Router" />
	</bean>

	<bean id="Router" class="org.openadaptor.core.router.Router">
		<description>
			The processMap property of this Router bean configures the processors
			that are wired together to ship the artifacts from the source repository
			to the target repository.
		</description>
		<property name="processMap">
			<map>
			<entry key-ref="SynchronizationStatusPollingReader" value-ref="SFEEReader" />
				<entry key-ref="SFEEReader"
					value-ref="GenericArtifact2XmlMapConverter" />
				<entry key-ref="GenericArtifact2XmlMapConverter"
					value-ref="XmlMap2OrderedMapConverter" />
				<entry key-ref="XmlMap2OrderedMapConverter"
					value-ref="DatabaseWriter" />
			</map>
		</property>
		<property name="exceptionProcessor" ref="ExceptionHandler" />
	</bean>
	<bean id="SynchronizationStatusPollingReader"
		class="com.collabnet.ccf.core.test.plugins.SimpleLoopingPollingReadConnector">
		<description>
			This polling connector polls the CCF database tables that contain the repository
			mapping and the synchronization info and feeds the details to the source repository
			reader piped down the line. Please refer the processMap configuration for the Router
			bean.
			
			In this case this polling reader reads the synchronization status using the database
			read connector configured in the property delegate.
			
			Polling interval seconds is configured as 0 to indicate that the polling reader should
			read from the database read connector continuously without and pauses in between.
		</description>
		<property name="pollLimit" value="2" />
		<property name="delegate" ref="SynchronizationStatusDatabaseReader" />
		<property name="pollIntervalSecs" value="0" />
	</bean>
	<bean id="SynchronizationStatusDatabaseReader"
		class="org.openadaptor.auxil.connector.jdbc.reader.JDBCReadConnector">
		<description>
			This is the JDBC read connector used by the SynchronizationStatusPollingReader to read the
			repository mapping and the synchronization info.
		</description>
		<property name="jdbcConnection" ref="JDBCConnection" />
		<!-- batch size of 0 or less means process all rows in one message batch. -->
		<!-- batch size of one means process one row per message and so on -->
		<property name="batchSize" value="1" />
		<property name="resultSetConverter" ref="SynchronizationStatusXMLConverter" />
		<property name="sql">
			<value>${ccf.sfeereader.poller.sql}</value>
		</property>
	</bean>
	<bean id="JDBCConnection"
		class="org.openadaptor.auxil.connector.jdbc.JDBCConnection">
		<description>
			This defines jdbc connection that will be used by the
			SynchronizationStatusPollingReader
		</description>
		<property name="driver" value="${ccf.db.driver}" />
		<property name="url" value="${ccf.db.url}" />
		<property name="username" value="${ccf.db.username}" />
		<property name="password" value="${ccf.db.password}" />
	</bean>
	
	<bean id="JdbcConnection"
		class="org.openadaptor.auxil.connector.jdbc.JDBCConnection">
		<description>
			This defines jdbc connection that will be used by the
			SynchronizationStatusPollingReader
		</description>
		<property name="driver" value="${ccf.db.driver}" />
		<property name="url" value="${ccf.db.url}" />
		<property name="username" value="${ccf.db.username}" />
		<property name="password" value="${ccf.db.password}" />
	</bean>

	<bean id="SynchronizationStatusXMLConverter"
		class="org.openadaptor.auxil.connector.jdbc.reader.xml.ResultSetToXMLConverter">
		<description>
			Converts the synchronization info in the database into XML sync info
			document.
		</description>
		<property name="convertToString" value="false" />
		<property name="rootElement" value="EmptySyncInf" />
	</bean>
	<bean id="SFEEReader"
		class="com.collabnet.ccf.pi.sfee.v44.SFEEReader">
		<description>
			This reader reads the modified artifacts in the SFEE system's tracker configured in the
			${sfee.server.1.url} and the sync info tables. It also reads all the related dependent artifact details
			and converts them into Generic Artifact XML document format and sends to the
			next component in the pipeline. The next component in the piple line may be
			an XSLT transformer component such as com.collabnet.ccf.core.transformer.XsltProcessor
			or an EntityService component depending on the target SFEE tracker needs the data
			to be translated to fit into its fields or not.
		</description>
		<property name="username" value="${sfee.server.1.username}" />
		<property name="password" value="${sfee.server.1.password}" />
		<property name="serverUrl"
			value="${sfee.server.1.url}" />
		<property name="connectionManager" ref="SFEEConnectionManager"></property>
		<property name="sleepInterval" value="1000"></property>
		<property name="shipAttachments" value="false" />
	</bean>
	<bean id="SFEEConnectionManager"
		class="com.collabnet.ccf.core.eis.connection.ConnectionManager">
		<description>
			The connection manager implements a connection pooling mechanism where the 
			connections to multiple systems are cached for the readers and writers
			to retrieve when needed. Before returning the connection to the client
			the connection manager checks if the connection is live and only returns 
			valid connections.
			It assigns and manages one pool per repository.
		</description>
		<property name="maxConnectionsPerPool" value="5"></property>
		<property name="maxIdleTimeForConnection" value="600000" />
		<property name="scavengerInterval" value="120000"></property>
		<property name="connectionFactory" ref="SFEEConnectionFactory"></property>
	</bean>
	<bean id="SFEEConnectionFactory"
		class="com.collabnet.ccf.pi.sfee.v44.SFEEConnectionFactory">
		<description>
			This bean is an implementation of the com.collabnet.ccf.core.eis.connection.ConnectionFactory
			interface. It is responsible to create and close an connection for a given
			repository.
			In this case SFEEConnectionFactory manages com.collabnet.ccf.pi.sfee.v44.Connection
			objects.
		</description>
	</bean>
	
	<bean id="GenericArtifact2XmlMapConverter" class="com.collabnet.ccf.core.transformer.XsltProcessor">
		<property name="xsltFile" value="${ccf.xsltFile}" />
	</bean>
	
	<bean id="XmlMap2OrderedMapConverter"
		class="org.openadaptor.auxil.convertor.xml.XmlToOrderedMapConvertor">
		<property name="omitTopLevelElementTag" value="true"/>
	</bean>
	<bean id="DatabaseWriter" class="org.openadaptor.auxil.connector.jdbc.writer.JDBCWriteConnector">
		<property name="writer" ref="DatabaseTableWriter"/>
		<property name="jdbcConnection" ref="JdbcConnection" />
	</bean>
	<bean id="DatabaseTableWriter"
		class="org.openadaptor.auxil.connector.jdbc.writer.MapTableWriter">
		<description>
			This is the writer object that writes the artifact data
			into the database table.
		</description>
		<property name="tableName" value="ARTIFACTS"></property>
		<property name="outputColumns">
			<list>
				<value>TITLE</value>
				<value>DESCRIPTION</value>
				<value>GROUP_VAL</value>
				<value>STATUS</value>
				<value>CATEGORY</value>
				<value>CUSTOMER</value>
				<value>PRIORITY</value>
				<value>ASSIGNED_TO</value>
				<value>REPORTED_IN_RELEASE</value>
				<value>ESTIMATED_HOURS</value>
				<value>COMMENT_TEXT</value>
			</list>
		</property>
	</bean>
	<bean id="ExceptionHandler" class="com.collabnet.ccf.core.hospital.Ambulance">
		<description>
			The ambulance class catches all the exceptions that are thrown and not caught
			by any of the components in the pipe and logs the infromation such as the component
			that threw this exception and the input Generic Artifact xml document or the
			sync info db xml document.
		</description>
  		<property name="hospitalFileName" value="${ccf.hospital.file}"/>
  	</bean>
</beans>