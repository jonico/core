<?xml version="1.0" encoding="UTF-8"?>
<!-- 
	$Author$
	$HeadURL$
-->

<!--
 Copyright 2009 CollabNet, Inc. ("CollabNet")

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">

	<description>
		This scenario shows how import the content of a file that
		contains artifacts encoded in the GenericArtifactXMLFormat. In
		its default configuration it loads some artifacts which might
		have come from Bidirectional Mirroring Scenario Tracker A and
		stores them into Bidirectional Mirroring Scenario Tracker B.
		This scenario is especially helpful if you like to replay failed
		artifact updates into the CCF pipeline again or if you just like
		to experiment with the fields contained within the
		GenericArtifactXMLFormat specification.
	</description>

	<bean id="SystemPropertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="ignoreResourceNotFound" value="false" />
		<property name="systemPropertiesMode">
			<bean
				id="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer.SYSTEM_PROPERTIES_MODE_OVERRIDE"
				class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean" />
		</property>
		<property name="locations">
			<description>
				Properties configured in these property files will be
				imported into the wiring file. The file ccf.properties
				contains the properties for the CCF core components.
				sfee.properties file contains the properties for the
				TF plugin classes.
			</description>
			<list>
				<value>classpath:ccf.properties</value>
				<value>classpath:sfee.properties</value>
			</list>
		</property>
	</bean>
	<bean id="GenericArtifactImport" class="org.openadaptor.core.adaptor.Adaptor">
		<property name="messageProcessor" ref="Router" />
	</bean>

	<bean id="Router" class="org.openadaptor.core.router.Router">
		<description>
			The processMap property of this Router bean configures the
			processors that are wired together to ship the artifacts
			from the source repository to the target repository.
		</description>
		<property name="processMap">
			<map>
				<entry key-ref="ExceptionConvertor" value-ref="HospitalWriter"/>
				<entry key-ref="FileReader"
					value-ref="GenericArtifactMultiLineParser" />
				<entry key-ref="GenericArtifactMultiLineParser"
					value-ref="EntityService" />
				<entry key-ref="EntityService" value-ref="TFWriter" />
				<entry key-ref="TFWriter"
					value-ref="SynchronizationStatusAndIdentityMappingTableUpdater" />
			</map>
		</property>
<!--		<property name="exceptionProcessor" ref="ExceptionHandler" />-->
			<property name="exceptionProcessor" ref="ExceptionConvertor"/><property name="metricsEnabled" value="true"/>
	</bean>
	
	<bean id="ExceptionConvertor" class="com.collabnet.ccf.core.hospital.CCFExceptionToOrderedMapConvertor"><property name="logMessageTemplate" value="${ccf.logMessageTemplate}" /><property name="timestampFormat" value="yyyy-MM-dd HH:mm:ss zzz"/><property name="onlyQuarantineGenericArtifacts" value="true"/>
		<property name="adaptor" ref="GenericArtifactImport"/>
	</bean>
	
	<bean id="HospitalWriter" class="org.openadaptor.auxil.connector.jdbc.writer.JDBCWriteConnector">
		<property name="jdbcConnection" ref="HospitalJDBCConnection" />
		<property name="writer">
		<bean
			class="org.openadaptor.auxil.connector.jdbc.writer.map.MapTableWriter">
			<property name="tableName" value="HOSPITAL" />
		</bean>
		</property>
	</bean>
	
	<bean id="HospitalJDBCConnection"
		class="org.openadaptor.auxil.connector.jdbc.JDBCConnection" scope="prototype">
		<description>
			This defines jdbc connection that will be used by the
			HospitalWriter
		</description>
		<property name="driver" value="${ccf.db.driver}" />
		<property name="url" value="${ccf.db.url}" />
		<property name="username" value="${ccf.db.username}" />
		<property name="password" value="${ccf.db.password}" />
	</bean>

	<bean id="FileReader"
		class="org.openadaptor.auxil.connector.iostream.reader.FileReadConnector">
		<description>
			This read connector reads lines from a file. In this
			scenario it reads a file with generic artifact xml documents
			in it.
		</description>
		<property name="filename"
			value="input/genericartifacts.xml.txt" />

	</bean>

	<bean id="GenericArtifactMultiLineParser"
		class="com.collabnet.ccf.core.utils.GenericArtifactMultiLineParser">
		<description><![CDATA[
			This component will take the content of an XML document (string) line by line
 			and converts the contained XML documents to a Dom4J document. It assumes that
 			the XML documents piped in line by line are all compliant to the Generic
 			Artifact XML schema (at least they should end with </artifact>).]]>
		</description>
	</bean>
	<bean id="TFConnectionManager"
		class="com.collabnet.ccf.core.eis.connection.ConnectionManager">
		<description>
			The connection manager implements a connection pooling
			mechanism where the connections to multiple systems are
			cached for the readers and writers to retrieve when needed.
			Before returning the connection to the client the connection
			manager checks if the connection is live and only returns
			valid connections. It assigns and manages one pool per
			repository.
		</description>
		<property name="maxConnectionsPerPool" value="5"></property>
		<property name="maxIdleTimeForConnection" value="600000" />
		<property name="scavengerInterval" value="120000"></property>
		<property name="connectionFactory"
			ref="TFConnectionFactory">
		</property>
	</bean>
	<bean id="TFConnectionFactory"
		class="com.collabnet.ccf.pi.sfee.v44.SFEEConnectionFactory">
		<description>
			This bean is an implementation of the
			com.collabnet.ccf.core.eis.connection.ConnectionFactory
			interface. It is responsible to create and close an
			connection for a given repository. In this case
			TFConnectionFactory manages
			com.collabnet.ccf.pi.sfee.v44.Connection objects.
		</description>
	</bean>
	<bean id="TFWriter"
		class="com.collabnet.ccf.pi.sfee.v44.SFEEWriter">
		<description>
			This data processor is responsible for writing the artifacts
			coming from the EntitySerive into the target TF system. It
			converts/extracts the data from the Generic Artifact XML and
			pushes to the target TF system.
		</description>
		<property name="username" value="${sfee.server.1.username}" />
		<property name="password" value="${sfee.server.1.password}" />
		<property name="serverUrl" value="${sfee.server.1.url}" />
		<property name="updateComment"
			value="Synchronized by Connector user" />
		<property name="connectionManager"
			ref="TFConnectionManager">
		</property>
	</bean>
	<bean id="EntityService"
		class="com.collabnet.ccf.core.EntityService">
		<description>
			This component is responsible for determining if the current
			artifact that is being shipped is to be created or updated
			in the target TF system. It determines the artifact action
			by checking if the artifact has an identity mapping already.
			If the identity mapping does not exist then the
			EntityService marks this artifact action as create otherwise
			update. Please refer the
			SynchronizationStatusAndIdentityMappingTableUpdater
			component.
		</description>
		<property name="identityMappingDatabaseReader"
			ref="IndentityMappingDatabaseReader" />
	</bean>

	<bean id="JDBCConnection"
		class="org.openadaptor.auxil.connector.jdbc.JDBCConnection" scope="prototype">
		<description>
			This defines jdbc connection that will be used by the
			SynchronizationStatusPollingReader
		</description>
		<property name="driver" value="${ccf.db.driver}" />
		<property name="url" value="${ccf.db.url}" />
		<property name="username" value="${ccf.db.username}" />
		<property name="password" value="${ccf.db.password}" />
	</bean>

	<bean id="SynchronizationStatusAndIdentityMappingTableUpdater"
		class="com.collabnet.ccf.core.config.MappingDBUpdater">
		<description>
			This component is responsible for creating the identity
			mapping for newly created artifacts in the target system. It
			also updates the synchronization status for a particular
			repository. For TF systems the synchronization info is the
			last modified time of the last shipped artifact. If the
			EntityService determines the artifact action as create (that
			is this artifact is a new artifact in the source system and
			doesn't have its identity mapping filled in the Sync info
			tables) then the writer component creates the artifact in
			the target system and populates the target artifact id in
			the Generic Artifact XML. The
			SynchronizationStatusAndIdentityMappingTableUpdater then
			takes the target artifact id and creates an identity mapping
			entry for the source and target artifact ids.
		</description>
		<property name="synchronizationStatusDatabaseUpdater"
			ref="SynchronizationStatusDatabaseUpdater">
		</property>
		<property name="identityMappingDatabaseReader"
			ref="IndentityMappingDatabaseReader" />
		<property name="identityMappingDatabaseUpdater"
			ref="IdentityMappingDatabaseUpdater" />
		<property name="identityMappingDatabaseInserter"
			ref="IdentityMappingDatabaseInserter">
		</property>
	</bean>
	<bean id="IndentityMappingDatabaseReader"
		class="org.openadaptor.auxil.connector.jdbc.reader.JDBCReadConnector">
		<description>
			This database reader component reads the target artifact id
			from the databse for a given source artifact id and the
			target repository and system information.
		</description>
		<property name="jdbcConnection" ref="JDBCConnection" />
		<!-- batch size of 0 or less means process all rows in one message batch. -->
		<!-- batch size of one means process one row per message and so on -->
		<property name="batchSize" value="0" />
		<property name="sql">
			<value>SELECT TARGET_ARTIFACT_ID, SOURCE_LAST_MODIFICATION_TIME, SOURCE_ARTIFACT_VERSION, TARGET_ARTIFACT_VERSION FROM IDENTITY_MAPPING WHERE SOURCE_SYSTEM_ID='?' AND SOURCE_REPOSITORY_ID='?' AND TARGET_SYSTEM_ID='?' AND TARGET_REPOSITORY_ID='?' AND SOURCE_ARTIFACT_ID='?' AND ARTIFACT_TYPE='?'</value>
		</property>
	</bean>
	<bean id="IdentityMappingDatabaseUpdater"
		class="org.openadaptor.auxil.connector.jdbc.writer.JDBCWriteConnector">
		<property name="writer" ref="IdentityMappingTableUpdater"></property>
		<property name="jdbcConnection" ref="JDBCConnection"></property>
	</bean>
	<bean id="IdentityMappingTableUpdater"
		class="com.collabnet.ccf.core.db.MapTableUpdater">
		<description>
			This is the writer object that writes the artifact mapping
			information into the database table.
		</description>
		<property name="tableName" value="IDENTITY_MAPPING"></property>
		<property name="sql"
			value="UPDATE IDENTITY_MAPPING SET SOURCE_LAST_MODIFICATION_TIME=?, TARGET_LAST_MODIFICATION_TIME=?, SOURCE_ARTIFACT_VERSION=?, TARGET_ARTIFACT_VERSION=? WHERE SOURCE_SYSTEM_ID=? AND SOURCE_REPOSITORY_ID=? AND TARGET_SYSTEM_ID=? AND TARGET_REPOSITORY_ID=? AND SOURCE_ARTIFACT_ID=? AND ARTIFACT_TYPE=?">
		</property>
		<property name="outputColumns">
			<list>
				<value>SOURCE_LAST_MODIFICATION_TIME</value>
				<value>TARGET_LAST_MODIFICATION_TIME</value>
				<value>SOURCE_ARTIFACT_VERSION</value>
				<value>TARGET_ARTIFACT_VERSION</value>
				<value>SOURCE_SYSTEM_ID</value>
				<value>SOURCE_REPOSITORY_ID</value>
				<value>TARGET_SYSTEM_ID</value>
				<value>TARGET_REPOSITORY_ID</value>
				<value>SOURCE_ARTIFACT_ID</value>
				<value>ARTIFACT_TYPE</value>
			</list>
		</property>
	</bean>
	<bean id="IdentityMappingDatabaseInserter"
		class="org.openadaptor.auxil.connector.jdbc.writer.JDBCWriteConnector">
		<description>
			This component updates the synchronization status for the
			current artifact.
		</description>
		<property name="writer" ref="IdentityMappingTableInserter"></property>
		<property name="jdbcConnection" ref="JDBCConnection"></property>
	</bean>
	<bean id="IdentityMappingTableInserter"
		class="org.openadaptor.auxil.connector.jdbc.writer.map.MapTableWriter">
		<description>
			This is the writer object that writes the artifact mapping
			information into the database table.
		</description>
		<property name="tableName" value="IDENTITY_MAPPING"></property>
		<property name="outputColumns">
			<list>
				<value>SOURCE_SYSTEM_ID</value>
				<value>SOURCE_REPOSITORY_ID</value>
				<value>TARGET_SYSTEM_ID</value>
				<value>TARGET_REPOSITORY_ID</value>
				<value>SOURCE_SYSTEM_KIND</value>
				<value>SOURCE_REPOSITORY_KIND</value>
				<value>TARGET_SYSTEM_KIND</value>
				<value>TARGET_REPOSITORY_KIND</value>
				<value>SOURCE_ARTIFACT_ID</value>
				<value>TARGET_ARTIFACT_ID</value>
				<value>SOURCE_LAST_MODIFICATION_TIME</value>
				<value>TARGET_LAST_MODIFICATION_TIME</value>
				<value>SOURCE_ARTIFACT_VERSION</value>
				<value>TARGET_ARTIFACT_VERSION</value>
				<value>ARTIFACT_TYPE</value>
				<value>DEP_CHILD_SOURCE_ARTIFACT_ID</value>
				<value>DEP_CHILD_SOURCE_REPOSITORY_ID</value>
				<value>DEP_CHILD_SOURCE_REPOSITORY_KIND</value>
				<value>DEP_CHILD_TARGET_ARTIFACT_ID</value>
				<value>DEP_CHILD_TARGET_REPOSITORY_ID</value>
				<value>DEP_CHILD_TARGET_REPOSITORY_KIND</value>
				<value>DEP_PARENT_SOURCE_ARTIFACT_ID</value>
				<value>DEP_PARENT_SOURCE_REPOSITORY_ID</value>
				<value>DEP_PARENT_SOURCE_REPOSITORY_KIND</value>
				<value>DEP_PARENT_TARGET_ARTIFACT_ID</value>
				<value>DEP_PARENT_TARGET_REPOSITORY_ID</value>
				<value>DEP_PARENT_TARGET_REPOSITORY_KIND</value>
			</list>
		</property>
	</bean>
	<bean id="SynchronizationStatusDatabaseUpdater"
		class="org.openadaptor.auxil.connector.jdbc.writer.JDBCWriteConnector">
		<property name="writer"
			ref="SynchronizationStatusTableUpdater">
		</property>
		<property name="jdbcConnection" ref="JDBCConnection"></property>
	</bean>
	<bean id="SynchronizationStatusTableUpdater"
		class="com.collabnet.ccf.core.db.MapTableUpdater">
		<description>
			This is the writer object that writes the artifact mapping
			information into the database table.
		</description>
		<property name="tableName" value="ARTIFACT_MAPPING"></property>
		<property name="sql" value="UPDATE SYNCHRONIZATION_STATUS SET LAST_SOURCE_ARTIFACT_MODIFICATION_DATE=?, LAST_SOURCE_ARTIFACT_VERSION=?, LAST_SOURCE_ARTIFACT_ID=? WHERE SOURCE_SYSTEM_ID=? AND SOURCE_REPOSITORY_ID=? AND TARGET_SYSTEM_ID=? AND TARGET_REPOSITORY_ID=? "></property>
		<property name="outputColumns">
			<list>
				<value>LAST_SOURCE_ARTIFACT_MODIFICATION_DATE</value>
				<value>LAST_SOURCE_ARTIFACT_VERSION</value>
				<value>LAST_SOURCE_ARTIFACT_ID</value>
				<value>SOURCE_SYSTEM_ID</value>
				<value>SOURCE_REPOSITORY_ID</value>
				<value>TARGET_SYSTEM_ID</value>
				<value>TARGET_REPOSITORY_ID</value>
			</list>
		</property>
	</bean>
	<!--<bean id="ExceptionHandler"
		class="com.collabnet.ccf.core.hospital.Ambulance">
		<description>
			The ambulance class catches all the exceptions that are
			thrown and not caught by any of the components in the pipe
			and logs the infromation such as the component that threw
			this exception and the input Generic Artifact xml document
			or the sync info db xml document.
		</description>
		<property name="hospitalFileName" value="${ccf.hospital.file}" />
		<property name="artifactsDirectory" value="${ccf.hospital.artifacts.directory}"></property>
	</bean>
-->
</beans>
