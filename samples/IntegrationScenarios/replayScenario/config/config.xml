<?xml version="1.0" encoding="UTF-8"?>
<!-- 
	$Author$
	$HeadURL$
-->

<!--
 Copyright 2009 CollabNet, Inc. ("CollabNet")

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">

	<description>
		This scenario is used to replay hospitalized artifacts in the target
		system they belong. In order just to replay the correct artifacts
		this scenario comes with lots of filters and sql statements that
		can be changed to control the message flow.
	</description>

	<bean id="SystemPropertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="ignoreResourceNotFound" value="false" />
		<property name="systemPropertiesMode">
			<bean
				id="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer.SYSTEM_PROPERTIES_MODE_OVERRIDE"
				class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean" />
		</property>
		<property name="locations">
			<description>
				Properties configured in these property files will be
				imported into the wiring file. The file ccf.properties
				contains the properties for the CCF core components.
				sfee.properties file contains the properties for the
				TF plugin classes.
			</description>
			<list>
				<value>classpath:ccf.properties</value>
				<value>classpath:sfee.properties</value>
				<value>classpath:cee.properties</value>
				<value>classpath:qc.properties</value>
			</list>
		</property>
	</bean>
	<bean id="ReplayScenario" class="org.openadaptor.core.adaptor.Adaptor">
		<property name="messageProcessor" ref="Router" />
	</bean>

	<bean id="Router" class="org.openadaptor.core.router.Router">
		<description>
			The processMap property of this Router bean configures the
			processors that are wired together to ship the artifacts
			from the source repository to the target repository.
		</description>
		<property name="processMap">
			<map>
				<entry key-ref="QuarantinedArtifactsReader">
					<!--  Please plugin all filters here that can handle certain types of failed artifact
						  You could group by component, error code, ... 
					-->
					<list>
						<ref bean="TFWriterErrorFilter" />
						<ref bean="PTWriterErrorFilter" />
						<ref bean="MarkAsReprocessedFilter"/>
					</list>
				</entry>
				
				
				<!--  
				All filters have to be connected with the hospital updator component
				to indicate that they have done the reprocessing of the artifact 
				-->
				<entry key-ref="TFWriterErrorFilter">
					<!--  Please plugin all filters here that can handle certain types of failed artifact
						  You could group by component, error code, ... 
					-->
					<list>
						<ref bean="TFEntityServiceXMLConverter" />
						<ref bean="HospitalUpdatorSQLConverterReprocessed" />
					</list>
				</entry>
				<entry key-ref="PTWriterErrorFilter">
					<!--  Please plugin all filters here that can handle certain types of failed artifact
						  You could group by component, error code, ... 
					-->
					<list>
						<ref bean="PTEntityServiceXMLConverter" />
						<ref bean="HospitalUpdatorSQLConverterReprocessed" />
					</list>
				</entry>
				
				<entry key-ref="MarkAsReprocessedFilter">
					<list>
						<ref bean="HospitalUpdatorSQLConverterReprocessed" />
					</list>
				</entry>
				
				<!--
				This section is used to pipe the output of the XML converters behind the filters
				into the main processing pipeline. 
				 -->
				<entry key-ref="TFEntityServiceXMLConverter" value-ref="TFEntityService" /> 
				<entry key-ref="PTEntityServiceXMLConverter" value-ref="PTEntityService" />

				
				<!--
				The output of all filters will go to these two components to update
				the hospitalized artifact entries 
				 -->		
				<entry key-ref="HospitalUpdatorSQLConverterReprocessed" value-ref="HospitalUpdator"/>
				<entry key-ref="ExceptionConvertor" value-ref="HospitalWriter"/>
				
				<!--  
				This is the main processing where the filters will send their data to
				after they converted it into the needed XML format
				-->
				<entry key-ref="TFTransformer" value-ref="TFEntityService" />
				<entry key-ref="TFEntityService" value-ref="TFWriter" />
				<entry key-ref="TFWriter"
					value-ref="SynchronizationStatusAndIdentityMappingTableUpdater" />
					
				<entry key-ref="PTTransformer" value-ref="PTEntityService" />
				<entry key-ref="PTEntityService" value-ref="PTWriter" />
				<entry key-ref="PTWriter"
					value-ref="SynchronizationStatusAndIdentityMappingTableUpdater" />
				
				<!-- 
				This wiring will allow to set the fixed field for successful replays
				 -->
				 <entry key-ref="SynchronizationStatusAndIdentityMappingTableUpdater" value-ref="HospitalUpdatorSQLConverterFixed"/>
				 <entry key-ref="HospitalUpdatorSQLConverterFixed" value-ref="HospitalUpdator"/>	
			</map>
		</property>
		<property name="exceptionProcessor" ref="ExceptionConvertor"/>
	</bean>
	
	<!--  
	Place all filter here, you can reference the field names directly in the script
	-->
	<bean id="TFWriterErrorFilter" class="org.openadaptor.auxil.processor.script.ScriptFilterProcessor">
		<description>		
		</description>
		<property name="scriptProcessor">
			<bean class="org.openadaptor.auxil.processor.script.MapScriptProcessor">
					<property name="script">
						<value>
						 <![CDATA[
						 	ERROR_CODE != null && (ORIGINATING_COMPONENT == 'TFWriter' || ORIGINATING_COMPONENT == 'TFEntityService')
						 ]]>
			  			</value>
					</property>
			</bean>
		</property>
		<!-- We ony let entries pass that fullfil the condition -->
		<property name="filterOnMatch" value="false"/>
	</bean>
	
	<bean id="PTWriterErrorFilter" class="org.openadaptor.auxil.processor.script.ScriptFilterProcessor">
		<description>		
		</description>
		<property name="scriptProcessor">
			<bean class="org.openadaptor.auxil.processor.script.MapScriptProcessor">
					<property name="script">
						<value>
						 <![CDATA[
						 	ERROR_CODE != null && (ORIGINATING_COMPONENT == 'PTWriter' || ORIGINATING_COMPONENT == 'PTEntityService')
						 ]]>
			  			</value>
					</property>
			</bean>
		</property>
		<!-- We ony let entries pass that fullfil the condition -->
		<property name="filterOnMatch" value="false"/>
	</bean>
	
	<bean id="MarkAsReprocessedFilter" class="org.openadaptor.auxil.processor.script.ScriptFilterProcessor">
		<description>
		This filter will match no artifacts in its default settings.
		If the filter condition is changed, all artifacts it will match
		will be immediately marked as reprocessed without getting actually reprocessed.  		
		</description>
		<property name="scriptProcessor">
			<bean class="org.openadaptor.auxil.processor.script.MapScriptProcessor">
					<property name="script">
						<value>
						 <![CDATA[
						 	false
						 ]]>
			  			</value>
					</property>
			</bean>
		</property>
		
		<!-- We ony let entries pass that fullfil the condition -->
		<property name="filterOnMatch" value="false"/>
	</bean>
	
	<!--
	Place the XML converters here, you can always use the same code  
	-->
	<bean id="TFEntityServiceXMLConverter" class="org.openadaptor.auxil.processor.script.ScriptProcessor">
		<description>
			This component will convert the generic artifact part of the hospitalized
			artifact into a Dom4J document. Furthermore it will use the transactionId
			attribute to transport the id within the hospital to allow to differentiate
			between successful and unsuccessful replays
		</description>
		<property name="script">
			<value>
			importPackage(Packages.org.dom4j);
			var old_oa_data=oa_data;
			oa_data=DocumentHelper.parseText(oa_data.get('GENERIC_ARTIFACT'));
			oa_data.getRootElement().addAttribute("transactionId",old_oa_data.get('ID'));
			oa_data.getRootElement().addAttribute("errorCode","ok");
			</value>
		</property>
	</bean>
	
	<bean id="PTEntityServiceXMLConverter" class="org.openadaptor.auxil.processor.script.ScriptProcessor">
		<description>
			This component will convert the generic artifact part of the hospitalized
			artifact into a Dom4J document. Furthermore it will use the transactionId
			attribute to transport the id within the hospital to allow to differentiate
			between successful and unsuccessful replays
		</description>
		<property name="script">
			<value>
			importPackage(Packages.org.dom4j);
			var old_oa_data=oa_data;
			oa_data=DocumentHelper.parseText(oa_data.get('GENERIC_ARTIFACT'));
			oa_data.getRootElement().addAttribute("transactionId",old_oa_data.get('ID'));
			oa_data.getRootElement().addAttribute("errorCode","ok");
			</value>
		</property>
	</bean>
	
	
	<!--
	Hospital related components are configured here
	You typically just have to change the SQL query of the QuarantinedArtifactsReader 
	 -->
	 <bean id="QuarantinedArtifactsReader"
		class="org.openadaptor.auxil.connector.jdbc.reader.JDBCReadConnector">
		<description>
			This SQL statement retrieves all hospitaized artifacts
			that should be replayed. Be careful not to chose artifacts
			that has been already replayed or artifacts that cannot be solved
			by using the components of this wiring. 
		</description>
		<property name="jdbcConnection" ref="HospitalJdbcConnection" />
		<!-- batch size of 0 or less means process all rows in one message batch. -->
		<!-- batch size of one means process one row per message and so on -->
		<property name="batchSize" value="0" />
		<property name="resultSetConverter"
			ref="HospitalResultSetConverter" />
		<property name="sql">
			<value>SELECT * FROM HOSPITAL WHERE REPROCESSED != TRUE</value>
		</property>
	</bean>
	
	<bean id="HospitalResultSetConverter"
		class="org.openadaptor.auxil.connector.jdbc.reader.orderedmap.ResultSetToOrderedMapConverter">
		<description>
			Component to convert the data base TF synchronization
			information (which trackers to query from which timestamp
			on) to XML documents the read connector processes in order
			to know which artifacts to poll for.
		</description>
	</bean>
	 
	<bean id="HospitalUpdatorSQLConverterReprocessed"
		class="org.openadaptor.auxil.processor.script.ScriptProcessor">
		<description>
			This defines the SQL update statement to update the
			hospital data base.
		</description>
		<property name="script">
			<value>oa_data = "UPDATE HOSPITAL SET REPROCESSED = TRUE WHERE ID = '" + oa_data.get('ID') + "'";</value>
		</property>
	</bean>
	
	<bean id="HospitalUpdatorSQLConverterFixed"
		class="org.openadaptor.auxil.processor.script.ScriptProcessor">
		<description>
			This defines the SQL update statement to update the
			hospital data base.
		</description>
		<!--<property name="script">
			<value>oa_data = "UPDATE HOSPITAL SET FIXED = TRUE WHERE ID = '" + oa_data.getRootElement().selectSingleNode("@transactionId").getText() + "'";</value>
		</property>
		-->
		<property name="script">
			<value>oa_data = "DELETE FROM HOSPITAL WHERE ID = '" + oa_data.getRootElement().selectSingleNode("@transactionId").getText() + "'";</value>
		</property>
	</bean>
	
	<bean id="HospitalJdbcConnection" class="org.openadaptor.auxil.connector.jdbc.JDBCConnection" scope="prototype">
    	<description>This defines the jdbc connection for the hospital.</description>
    	<property name="driver" value="${ccf.db.driver}" />
		<property name="url" value="${ccf.db.url}" />
		<property name="username" value="${ccf.db.username}" />
		<property name="password" value="${ccf.db.password}" />
	</bean>
  
 	<!-- 
 	These components are needed to catch new exceptions and store them in the hospital
 	-->
	<bean id="ExceptionConvertor" class="com.collabnet.ccf.core.hospital.CCFExceptionToOrderedMapConvertor"><property name="logMessageTemplate" value="${ccf.logMessageTemplate}" /><property name="timestampFormat" value="yyyy-MM-dd HH:mm:ss zzz"/>
  		<property name="adaptor" ref="ReplayScenario"/>
	</bean>
  
 	<bean id="HospitalWriter" class="org.openadaptor.auxil.connector.jdbc.writer.JDBCWriteConnector">
		<property name="jdbcConnection" ref="HospitalJdbcConnection" />
		<property name="writer">
			<bean
				class="org.openadaptor.auxil.connector.jdbc.writer.map.MapTableWriter">
				<property name="tableName" value="HOSPITAL" />
			</bean>
		</property>
 	</bean>
  
  	<bean id="HospitalUpdator"
		class="org.openadaptor.auxil.connector.jdbc.writer.JDBCWriteConnector">
		<description>
			This component will update the hospitalized artifacts
		</description>
		<property name="jdbcConnection" ref="HospitalJdbcConnection" />
	</bean>
	
	
	<!-- 
	 The components of the main processing pipeline are configured here
	 -->
	
	<bean id="TFTransformer"
		class="com.collabnet.ccf.core.transformer.XsltProcessor">
		<description>
			The xsltDir specifies the directory in which the xsl files
			are contained. The naming conventions for the xsl files need
			to be followed. Name of an xsl file should be:
			sourceSystem+sourceRepository+targetSystem+targetRepository.xsl
		</description>
		<property name="xsltDir" value="xslt/" />
	</bean>
	
	<bean id="PTTransformer"
		class="com.collabnet.ccf.core.transformer.XsltProcessor">
		<description>
			The xsltDir specifies the directory in which the xsl files
			are contained. The naming conventions for the xsl files need
			to be followed. Name of an xsl file should be:
			sourceSystem+sourceRepository+targetSystem+targetRepository.xsl
		</description>
		<property name="xsltDir" value="xslt/" />
	</bean>
	
	<!-- You may set a different user for the replay script to trigger initial resynchs -->
	<bean id="TFConnectionManager"
		class="com.collabnet.ccf.core.eis.connection.ConnectionManager">
		<description>
			The connection manager implements a connection pooling
			mechanism where the connections to multiple systems are
			cached for the readers and writers to retrieve when needed.
			Before returning the connection to the client the connection
			manager checks if the connection is live and only returns
			valid connections. It assigns and manages one pool per
			repository.
		</description>
		<property name="maxConnectionsPerPool" value="5"></property>
		<property name="maxIdleTimeForConnection" value="600000" />
		<property name="scavengerInterval" value="120000"></property>
		<property name="connectionFactory"
			ref="TFConnectionFactory">
		</property>
		<property name="useStandardTimeoutHandlingCode" value="false"/>
        <property name="enableReloginAfterSessionTimeout" value="true"/>
        <property name="enableRetryAfterNetworkTimeout" value="true"/>
	</bean>
	
	<bean id="TFConnectionFactory"
		class="com.collabnet.ccf.pi.sfee.v44.SFEEConnectionFactory">
		<description>
			This bean is an implementation of the
			com.collabnet.ccf.core.eis.connection.ConnectionFactory
			interface. It is responsible to create and close an
			connection for a given repository. In this case
			TFConnectionFactory manages
			com.collabnet.ccf.pi.sfee.v44.Connection objects.
		</description>
	</bean>
	
	<bean id="TFWriter"
		class="com.collabnet.ccf.pi.sfee.v44.SFEEWriter">
		<description>
			This data processor is responsible for writing the artifacts
			coming from the EntitySerive into the target TF system. It
			converts/extracts the data from the Generic Artifact XML and
			pushes to the target TF system.
		</description>
		<property name="username" value="${sfee.server.1.username}" />
		<property name="password" value="${sfee.server.1.password}" />
		<property name="serverUrl" value="${sfee.server.1.url}" />
		<property name="updateComment"
			value="Synchronized by Connector user" />
		<property name="connectionManager"
			ref="TFConnectionManager">
		</property>
	</bean>
	
	<bean id="TFEntityService"
		class="com.collabnet.ccf.core.EntityService">
		<description>
			This component is responsible for determining if the current
			artifact that is being shipped is to be created or updated
			in the target TF system. It determines the artifact action
			by checking if the artifact has an identity mapping already.
			If the identity mapping does not exist then the
			EntityService marks this artifact action as create otherwise
			update. Please refer the
			SynchronizationStatusAndIdentityMappingTableUpdater
			component.
		</description>
		<property name="identityMappingDatabaseReader"
			ref="IndentityMappingDatabaseReader" />
	</bean>
	
	<bean id="PTEntityService"
		class="com.collabnet.ccf.core.EntityService">
		<description>
			This component is responsible for determining if the current
			artifact that is being shipped is to be created or updated
			in the target CEE system. It determines the artifact action
			by checking if the artifact has an identity mapping already.
			If the identity mapping does not exist then the
			EntityService marks this artifact action as create otherwise
			update. Please refer the
			SynchronizationStatusAndIdentityMappingTableUpdater
			component.
		</description>
		<property name="identityMappingDatabaseReader"
			ref="IndentityMappingDatabaseReader" />
	</bean>
	
	<bean id="PTWriter"
        class="com.collabnet.ccf.pi.cee.pt.v50.ProjectTrackerWriter">
        <description>
            This component creates and updates defects in PT.
        </description>
        <property name="username" value="${cee.server.1.username}" />
        <property name="password" value="${cee.server.1.password}" />
        <property name="serverUrl" value="${cee.server.1.url}" />
        <property name="connectionManager"
            ref="CEEConnectionManager">
        </property>
    </bean>
	<bean id="CEEConnectionManager"
		class="com.collabnet.ccf.core.eis.connection.ConnectionManager">
		<description>
			The connection manager implements a connection pooling
			mechanism where the connections to multiple systems are
			cached for the readers and writers to retrieve when needed.
			Before returning the connection to the client the connection
			manager checks if the connection is live and only returns
			valid connections. It assigns and manages one pool per
			repository.
		</description>
		<property name="maxConnectionsPerPool" value="5"></property>
		<property name="maxIdleTimeForConnection" value="600000" />
		<property name="scavengerInterval" value="120000"></property>
		<property name="connectionFactory"
			ref="CEEConnectionFactory">	
		</property>
		<property name="useStandardTimeoutHandlingCode" value="true"/>
        <property name="enableReloginAfterSessionTimeout" value="true"/>
        <property name="enableRetryAfterNetworkTimeout" value="true"/>
	</bean>
	<bean id="CEEConnectionFactory"
		class="com.collabnet.ccf.pi.cee.pt.v50.CollabNetConnectionFactory">
		<description>
			This bean is an implementation of the
			com.collabnet.ccf.core.eis.connection.ConnectionFactory
			interface. It is responsible to create and close an
			connection for a PT repository.
		</description>
	</bean>
	
	<!-- 
	These components can be shared between different plugins and update
	the identity mapping and synchronization status tables
	 -->
	<bean id="JDBCConnection"
		class="org.openadaptor.auxil.connector.jdbc.JDBCConnection" scope="prototype">
		<description>
			This defines jdbc connection that will be used by
			the components on the main processing pipeline
		</description>
		<property name="driver" value="${ccf.db.driver}" />
		<property name="url" value="${ccf.db.url}" />
		<property name="username" value="${ccf.db.username}" />
		<property name="password" value="${ccf.db.password}" />
	</bean>

	<bean id="SynchronizationStatusAndIdentityMappingTableUpdater"
		class="com.collabnet.ccf.core.config.MappingDBUpdater">
		<description>
			This component is responsible for creating the identity
			mapping for newly created artifacts in the target system. It
			also updates the synchronization status for a particular
			repository. For TF systems the synchronization info is the
			last modified time of the last shipped artifact. If the
			EntityService determines the artifact action as create (that
			is this artifact is a new artifact in the source system and
			doesn't have its identity mapping filled in the Sync info
			tables) then the writer component creates the artifact in
			the target system and populates the target artifact id in
			the Generic Artifact XML. The
			SynchronizationStatusAndIdentityMappingTableUpdater then
			takes the target artifact id and creates an identity mapping
			entry for the source and target artifact ids.
		</description>
		<property name="synchronizationStatusDatabaseUpdater"
			ref="SynchronizationStatusDatabaseUpdater">
		</property>
		<property name="identityMappingDatabaseReader"
			ref="IndentityMappingDatabaseReader" />
		<property name="identityMappingDatabaseUpdater"
			ref="IdentityMappingDatabaseUpdater" />
		<property name="identityMappingDatabaseInserter"
			ref="IdentityMappingDatabaseInserter">
		</property>
		<property name="updateSynchronizationStatusTable" value="false"/>
	</bean>
	
	<bean id="IndentityMappingDatabaseReader"
		class="org.openadaptor.auxil.connector.jdbc.reader.JDBCReadConnector">
		<description>
			This database reader component reads the target artifact id
			from the databse for a given source artifact id and the
			target repository and system information.
		</description>
		<property name="jdbcConnection" ref="JDBCConnection" />
		<!-- batch size of 0 or less means process all rows in one message batch. -->
		<!-- batch size of one means process one row per message and so on -->
		<property name="batchSize" value="0" />
		<property name="sql">
			<value>SELECT TARGET_ARTIFACT_ID, SOURCE_LAST_MODIFICATION_TIME, SOURCE_ARTIFACT_VERSION, TARGET_ARTIFACT_VERSION FROM IDENTITY_MAPPING WHERE SOURCE_SYSTEM_ID='?' AND SOURCE_REPOSITORY_ID='?' AND TARGET_SYSTEM_ID='?' AND TARGET_REPOSITORY_ID='?' AND SOURCE_ARTIFACT_ID='?' AND ARTIFACT_TYPE='?'</value>
		</property>
	</bean>

	<bean id="IdentityMappingDatabaseInserter"
		class="org.openadaptor.auxil.connector.jdbc.writer.JDBCWriteConnector">
		<description>
			This component updates the synchronization status for the
			current artifact.
		</description>
		<property name="writer" ref="IdentityMappingTableInserter"></property>
		<property name="jdbcConnection" ref="JDBCConnection"></property>
	</bean>
	<bean id="IdentityMappingTableInserter"
		class="org.openadaptor.auxil.connector.jdbc.writer.map.MapTableWriter">
		<description>
			This is the writer object that writes the artifact mapping
			information into the database table.
		</description>
		<property name="tableName" value="IDENTITY_MAPPING"></property>
		<property name="outputColumns">
			<list>
				<value>SOURCE_SYSTEM_ID</value>
				<value>SOURCE_REPOSITORY_ID</value>
				<value>TARGET_SYSTEM_ID</value>
				<value>TARGET_REPOSITORY_ID</value>
				<value>SOURCE_SYSTEM_KIND</value>
				<value>SOURCE_REPOSITORY_KIND</value>
				<value>TARGET_SYSTEM_KIND</value>
				<value>TARGET_REPOSITORY_KIND</value>
				<value>SOURCE_ARTIFACT_ID</value>
				<value>TARGET_ARTIFACT_ID</value>
				<value>SOURCE_LAST_MODIFICATION_TIME</value>
				<value>TARGET_LAST_MODIFICATION_TIME</value>
				<value>SOURCE_ARTIFACT_VERSION</value>
				<value>TARGET_ARTIFACT_VERSION</value>
				<value>ARTIFACT_TYPE</value>
				<value>DEP_CHILD_SOURCE_ARTIFACT_ID</value>
				<value>DEP_CHILD_SOURCE_REPOSITORY_ID</value>
				<value>DEP_CHILD_SOURCE_REPOSITORY_KIND</value>
				<value>DEP_CHILD_TARGET_ARTIFACT_ID</value>
				<value>DEP_CHILD_TARGET_REPOSITORY_ID</value>
				<value>DEP_CHILD_TARGET_REPOSITORY_KIND</value>
				<value>DEP_PARENT_SOURCE_ARTIFACT_ID</value>
				<value>DEP_PARENT_SOURCE_REPOSITORY_ID</value>
				<value>DEP_PARENT_SOURCE_REPOSITORY_KIND</value>
				<value>DEP_PARENT_TARGET_ARTIFACT_ID</value>
				<value>DEP_PARENT_TARGET_REPOSITORY_ID</value>
				<value>DEP_PARENT_TARGET_REPOSITORY_KIND</value>
			</list>
		</property>
	</bean>

	<bean id="IdentityMappingDatabaseUpdater"
		class="org.openadaptor.auxil.connector.jdbc.writer.JDBCWriteConnector">
		<property name="writer" ref="IdentityMappingTableUpdater"></property>
		<property name="jdbcConnection" ref="JDBCConnection"></property>
	</bean>
	
	<bean id="IdentityMappingTableUpdater"
		class="com.collabnet.ccf.core.db.MapTableUpdater">
		<description>
			This is the writer object that writes the artifact mapping
			information into the database table.
		</description>
		<property name="tableName" value="IDENTITY_MAPPING"></property>
		<property name="sql"
			value="UPDATE IDENTITY_MAPPING SET SOURCE_LAST_MODIFICATION_TIME=?, TARGET_LAST_MODIFICATION_TIME=?, SOURCE_ARTIFACT_VERSION=?, TARGET_ARTIFACT_VERSION=? WHERE SOURCE_SYSTEM_ID=? AND SOURCE_REPOSITORY_ID=? AND TARGET_SYSTEM_ID=? AND TARGET_REPOSITORY_ID=? AND SOURCE_ARTIFACT_ID=? AND ARTIFACT_TYPE=?">
		</property>
		<property name="outputColumns">
			<list>
				<value>SOURCE_LAST_MODIFICATION_TIME</value>
				<value>TARGET_LAST_MODIFICATION_TIME</value>
				<value>SOURCE_ARTIFACT_VERSION</value>
				<value>TARGET_ARTIFACT_VERSION</value>
				<value>SOURCE_SYSTEM_ID</value>
				<value>SOURCE_REPOSITORY_ID</value>
				<value>TARGET_SYSTEM_ID</value>
				<value>TARGET_REPOSITORY_ID</value>
				<value>SOURCE_ARTIFACT_ID</value>
				<value>ARTIFACT_TYPE</value>
			</list>
		</property>
	</bean>

	<bean id="SynchronizationStatusDatabaseUpdater"
		class="org.openadaptor.auxil.connector.jdbc.writer.JDBCWriteConnector">
		<property name="writer"
			ref="SynchronizationStatusTableUpdater">
		</property>
		<property name="jdbcConnection" ref="JDBCConnection"></property>
	</bean>
	<bean id="SynchronizationStatusTableUpdater"
		class="com.collabnet.ccf.core.db.MapTableUpdater">
		<description>
			This is the writer object that writes the artifact mapping
			information into the database table.
		</description>
		<property name="tableName" value="SYNCHRONIZATION_STATUS"></property>
		<property name="sql" value="UPDATE SYNCHRONIZATION_STATUS SET LAST_SOURCE_ARTIFACT_MODIFICATION_DATE=?, LAST_SOURCE_ARTIFACT_VERSION=?, LAST_SOURCE_ARTIFACT_ID=? WHERE SOURCE_SYSTEM_ID=? AND SOURCE_REPOSITORY_ID=? AND TARGET_SYSTEM_ID=? AND TARGET_REPOSITORY_ID=? "></property>
		<property name="outputColumns">
			<list>
				<value>LAST_SOURCE_ARTIFACT_MODIFICATION_DATE</value>
				<value>LAST_SOURCE_ARTIFACT_VERSION</value>
				<value>LAST_SOURCE_ARTIFACT_ID</value>
				<value>SOURCE_SYSTEM_ID</value>
				<value>SOURCE_REPOSITORY_ID</value>
				<value>TARGET_SYSTEM_ID</value>
				<value>TARGET_REPOSITORY_ID</value>
			</list>
		</property>
	</bean>
	
</beans>
