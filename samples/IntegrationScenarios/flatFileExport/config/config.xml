<?xml version="1.0" encoding="UTF-8"?>
<!-- 
$Author$
$HeadURL$
 -->
 
<!--
 Copyright 2009 CollabNet, Inc. ("CollabNet")

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">
	<description>
		<![CDATA[    
  This integration scenario demonstrates the capability of CCF to export 
  the artifacts from an TF tracker into a CSV file.

1. Configuring the TF tracker information
	The TF tracker id is configured in the database in the SYNCHRONIZATION_STATUS
	table. Please refer the source repository id configuration in the 
	centralCCFDatabase/ccfDatabase.script
	Please change this value to the tracker id that you intend to export the
	data from and adjust the SQL query in the ccf.sfeereader.poller.sql property
	(contained in config/ccf.properties).
	
	Change the TF SOAP server URL and password in the config/sfee.properties
	file as shown below.
	sfee.server.1.url=<TF SOAP server URL>
	sfee.server.1.username=<connector user>
	sfee.server.1.password=<connector user's password>

2. Please note that this integration scenario currently does not support
	a) exporting multi-select field values.
		Mutiselect field values will not be exported properly if there are
		more than one field values are selected in the tracker.
	b) attachments will not be exported into the CSV file.
  
  ]]>
	</description>
	<bean id="SystemPropertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="ignoreResourceNotFound" value="false" />
		<property name="systemPropertiesMode">
			<bean
				id="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer.SYSTEM_PROPERTIES_MODE_OVERRIDE"
				class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean" />
		</property>
		<property name="locations">
			<description>
				Properties configured in these property files will be imported into the wiring file.
				The file ccf.properties contains the properties for the CCF core components.
				sfee.properties file contains the properties for the TF plugin classes.
			</description>
			<list>
				<value>classpath:ccf.properties</value>
				<value>classpath:sfee.properties</value>
			</list>
		</property>
	</bean>
	<bean id="FlatFileExport" class="org.openadaptor.core.adaptor.Adaptor">
		<property name="messageProcessor" ref="Router" />
	</bean>

	<bean id="Router" class="org.openadaptor.core.router.Router">
		<description>
			The processMap property of this Router bean configures the processors
			that are wired together to ship the artifacts from the source repository
			to the target repository.
		</description>
		<property name="processMap">
			<map>
			<entry key-ref="ExceptionConvertor" value-ref="HospitalWriter"/>
			<entry key-ref="SynchronizationStatusPollingReader" value-ref="TFReader" />
				<entry key-ref="TFReader"
					value-ref="GenericArtifact2XmlMapConverter" />
				<entry key-ref="GenericArtifact2XmlMapConverter"
					value-ref="XmlMap2OrderedMapConverter" />
				<entry key-ref="XmlMap2OrderedMapConverter"
					value-ref="OrderedMap2OutputCSVStringConverter" />
				<entry key-ref="OrderedMap2OutputCSVStringConverter"
					value-ref="OutputCSVFileWriter" />
			</map>
		</property>
			<property name="exceptionProcessor" ref="ExceptionConvertor"/>
<!--		<property name="exceptionProcessor" ref="ExceptionHandler" />-->
	</bean>
	<bean id="ExceptionConvertor" class="com.collabnet.ccf.core.hospital.CCFExceptionToOrderedMapConvertor"><property name="logMessageTemplate" value="${ccf.logMessageTemplate}" /><property name="timestampFormat" value="yyyy-MM-dd HH:mm:ss zzz"/>
		<property name="adaptor" ref="FlatFileExport"/>
	</bean>
	
	<bean id="HospitalWriter" class="org.openadaptor.auxil.connector.jdbc.writer.JDBCWriteConnector">
		<property name="jdbcConnection" ref="HospitalJDBCConnection" />
		<property name="writer">
		<bean
			class="org.openadaptor.auxil.connector.jdbc.writer.map.MapTableWriter">
			<property name="tableName" value="HOSPITAL" />
		</bean>
		</property>
	</bean>
	
	<bean id="HospitalJDBCConnection"
		class="org.openadaptor.auxil.connector.jdbc.JDBCConnection" scope="prototype">
		<description>
			This defines jdbc connection that will be used by the
			HospitalWriter
		</description>
		<property name="driver" value="${ccf.db.driver}" />
		<property name="url" value="${ccf.db.url}" />
		<property name="username" value="${ccf.db.username}" />
		<property name="password" value="${ccf.db.password}" />
	</bean>
	
	<bean id="SynchronizationStatusPollingReader"
		class="com.collabnet.ccf.core.test.plugins.SimpleLoopingPollingReadConnector">
		<description>
			This polling connector polls the CCF database tables that contain the repository
			mapping and the synchronization info and feeds the details to the source repository
			reader piped down the line. Please refer the processMap configuration for the Router
			bean.
			
			In this case this polling reader reads the synchronization status using the database
			read connector configured in the property delegate.
			
			Polling interval seconds is configured as 0 to indicate that the polling reader should
			read from the database read connector continuously without and pauses in between.
		</description>
		<property name="pollLimit" value="0" />
		<property name="delegate" ref="SynchronizationStatusDatabaseReader" />
		<property name="pollIntervalSecs" value="0" /><property name="reconnectDelegateBetweenPolls" value="true"/>
	</bean>
	<bean id="SynchronizationStatusDatabaseReader"
		class="org.openadaptor.auxil.connector.jdbc.reader.JDBCReadConnector">
		<description>
			This is the JDBC read connector used by the SynchronizationStatusPollingReader to read the
			repository mapping and the synchronization info.
		</description>
		<property name="jdbcConnection" ref="JDBCConnection" />
		<!-- batch size of 0 or less means process all rows in one message batch. -->
		<!-- batch size of one means process one row per message and so on -->
		<property name="batchSize" value="1" />
		<property name="resultSetConverter" ref="SynchronizationStatusXMLConverter" />
		<property name="sql">
			<value>${ccf.sfeereader.poller.sql}</value>
		</property>
	</bean>
	<bean id="JDBCConnection"
		class="org.openadaptor.auxil.connector.jdbc.JDBCConnection" scope="prototype">
		<description>
			This defines jdbc connection that will be used by the
			SynchronizationStatusPollingReader
		</description>
		<property name="driver" value="${ccf.db.driver}" />
		<property name="url" value="${ccf.db.url}" />
		<property name="username" value="${ccf.db.username}" />
		<property name="password" value="${ccf.db.password}" />
	</bean>

	<bean id="SynchronizationStatusXMLConverter"
		class="org.openadaptor.auxil.connector.jdbc.reader.xml.ResultSetToXMLConverter">
		<description>
			Converts the synchronization info in the database into XML sync info
			document.
		</description>
		<property name="convertToString" value="false" />
		<property name="rootElement" value="EmptySyncInf" />
	</bean>
	<bean id="TFReader"
		class="com.collabnet.ccf.pi.sfee.v44.SFEEReader">
		<description>
			This reader reads the modified artifacts in the TF system's tracker configured in the
			${sfee.server.1.url} and the sync info tables. It also reads all the related dependent artifact details
			and converts them into Generic Artifact XML document format and sends to the
			next component in the pipeline. The next component in the piple line may be
			an XSLT transformer component such as com.collabnet.ccf.core.transformer.XsltProcessor
			or an EntityService component depending on the target TF tracker needs the data
			to be translated to fit into its fields or not.
		</description>
		<property name="username" value="${sfee.server.1.username}" />
		<property name="password" value="${sfee.server.1.password}" />
		<property name="serverUrl"
			value="${sfee.server.1.url}" />
		<property name="connectionManager" ref="TFConnectionManager"></property>
		<property name="sleepInterval" value="1000"></property>
		<property name="shipAttachments" value="false" />
		<property name="ignoreConnectorUserUpdates" value="false"/>
		<property name="shutdownCCFAfterInitialSync" value="true"/>
		<property name="bulkImport" value="true"/>
	</bean>
	<bean id="TFConnectionManager"
		class="com.collabnet.ccf.core.eis.connection.ConnectionManager">
		<description>
			The connection manager implements a connection pooling mechanism where the 
			connections to multiple systems are cached for the readers and writers
			to retrieve when needed. Before returning the connection to the client
			the connection manager checks if the connection is live and only returns 
			valid connections.
			It assigns and manages one pool per repository.
		</description>
		<property name="maxConnectionsPerPool" value="5"></property>
		<property name="maxIdleTimeForConnection" value="600000" />
		<property name="scavengerInterval" value="120000"></property>
		<property name="connectionFactory" ref="TFConnectionFactory"></property>
	</bean>
	<bean id="TFConnectionFactory"
		class="com.collabnet.ccf.pi.sfee.v44.SFEEConnectionFactory">
		<description>
			This bean is an implementation of the com.collabnet.ccf.core.eis.connection.ConnectionFactory
			interface. It is responsible to create and close an connection for a given
			repository.
			In this case TFConnectionFactory manages com.collabnet.ccf.pi.sfee.v44.Connection
			objects.
		</description>
	</bean>
	
	<bean id="GenericArtifact2XmlMapConverter" class="com.collabnet.ccf.core.transformer.XsltProcessor">
		<property name="xsltDir" value="xslt/" />
	</bean>
	
	<bean id="XmlMap2OrderedMapConverter"
		class="org.openadaptor.auxil.convertor.xml.XmlToOrderedMapConvertor">
		<property name="omitTopLevelElementTag" value="true"/>
	</bean>
	
	<bean id="OrderedMap2OutputCSVStringConverter"
		class="org.openadaptor.auxil.convertor.delimited.OrderedMapToDelimitedStringConvertor">
		<property name="quoteChar" value='"'/>
		<property name="outputHeader" value="true"/>
		<property name="forceEnclosingQuotes" value="true"/>
	</bean>
	
	<bean id="OutputCSVFileWriter"
		class="org.openadaptor.auxil.connector.iostream.writer.FileWriteConnector">
		<property name="filename" value="output/csvoutputfile.dat" />
		<property name="append" value="false" />
	</bean>
	<!--<bean id="ExceptionHandler" class="com.collabnet.ccf.core.hospital.Ambulance">
		<description>
			The ambulance class catches all the exceptions that are thrown and not caught
			by any of the components in the pipe and logs the infromation such as the component
			that threw this exception and the input Generic Artifact xml document or the
			sync info db xml document.
		</description>
  		<property name="hospitalFileName" value="${ccf.hospital.file}"/>
  		<property name="artifactsDirectory" value="${ccf.hospital.artifacts.directory}"></property>
  	</bean>
-->
</beans>