<?xml version="1.0" ?>

<!--
#* [[
#* Copyright (C) 2005-2007 The Software Conservancy as Trustee. All rights
#* reserved.
#*
#* Permission is hereby granted, free of charge, to any person obtaining a
#* copy of this software and associated documentation files (the
#* "Software"), to deal in the Software without restriction, including
#* without limitation the rights to use, copy, modify, merge, publish,
#* distribute, sublicense, and/or sell copies of the Software, and to
#* permit persons to whom the Software is furnished to do so, subject to
#* the following conditions:
#*
#* The above copyright notice and this permission notice shall be included
#* in all copies or substantial portions of the Software.
#*
#* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
#* OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
#* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
#* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
#* LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
#* OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
#* WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#*
#* Nothing in this notice shall be deemed to grant any rights to
#* trademarks, copyrights, patents, trade secrets or any other intellectual
#* property of the licensor or any contributor except as expressly stated
#* herein. No patent license is granted separate from the Software, for
#* code that you delete from the Software, or for combinations of the
#* Software with other software or hardware.
#* ]]
-->

<project name="CCF-Example-Scenarios" default="docs">
  <target name="${basedir}/samples/docs"/>

  <!-- defaults to use trunk. Override with a particular tag when building releases -->
  <condition property="examples.relative.basename" value="tags/${tag}">
    <not>
      <equals arg1="${tag}" arg2="trunk"/>
    </not>
  </condition>

  <property name="examples.relative.basename" value="trunk" />


  <property file="docs.properties" />
  <!-- Where to find XSL Transforms, Schemas, DTDs -->


  <property name="src.examples.dir" value=".." />
  <property name="src.examples.tools.dir" value="." />

  <property name="build.examples.docs.dir" value="../../../www/exampleScenarioDocs/" />
  <property name="build.examples.images.dir" value="${build.examples.docs.dir}" />

  <property name="filecomment.path.pattern1" value="$HeadURL: http://ccf.open.collab.net/svn/ccf/trunk/core/samples/"/>
  <property name="filecomment.path.pattern2" value="\$HeadURL\: http\:\/\/ccf\.open\.collab\.net\/svn\/ccf\/trunk\/core\/samples\/"/>
  <property name="filecomment.path.pattern3" value="this pattern will not be found"/>
  <property name="filecomment.path.pattern4" value="this pattern will not be found"/>


    <!-- Include all of the XML example files, except the ones that are not Spring XML config: -->
  <patternset id="example.xml.config.files">
    <include name="IntegrationScenarios/**/*.xml" />
    <include name="QCTF/**/*.xml" />
  	<include name="QCTFNG/**/*.xml" />
    <include name="QCPT/**/*.xml" />
    <exclude name="**/input/*.xml" />
    <exclude name="**/output/*.xml" />
    <exclude name="**/xslt/*.xml" />
  </patternset>

  <!-- Where to find the schema files: -->
  <xmlcatalog id="oa3XmlCatalog">
    <entity publicId="adaptorDoc.xsl" location="${src.examples.tools.dir}/xslt/adaptorDoc.xsl" />

    <dtd publicId="-//SPRING//DTD BEAN 2.0//EN" location="${src.examples.tools.dir}/xslt/spring-beans-2.0.dtd" />

    <entity publicId="http://www.springframework.org/schema/beans" location="${src.examples.tools.dir}/xslt/spring-beans-2.0.xsd" />
  </xmlcatalog>


  <target name="docs_prepare">

    <!-- Start with clean cookbook and tutorial generated docs/images directories: -->
    <mkdir dir="${build.examples.docs.dir}" />
    <mkdir dir="${build.examples.images.dir}" />
    <delete>
      <fileset dir="${build.examples.images.dir}" includes="**/*,*" />
      <fileset dir="${build.examples.docs.dir}" includes="**/*,*" />
    </delete>
    <mkdir dir="${build.examples.docs.dir}" />
    <mkdir dir="${build.examples.images.dir}" />


    <!-- Set the platform/installation specific path to the installed Graphviz binary: -->

    <condition property="graphviz.dot" value="${graphviz.dot.windows}">
      <and>
        <os family="windows" />
        <available file="${graphviz.dot.windows}" />
      </and>
    </condition>

    <condition property="graphviz.dot" value="${graphviz.dot.unix}">
      <and>
        <os family="unix" />
        <not>
          <os name="Mac OS X" />
        </not>
        <available file="${graphviz.dot.unix}" />
      </and>
    </condition>

    <condition property="graphviz.dot" value="${graphviz.dot.mac}">
      <and>
        <os name="Mac OS X" />
        <available file="${graphviz.dot.mac}" />
      </and>
    </condition>

  </target>


  <target name="docs_images" depends="docs_prepare" if="graphviz.dot" description="Generates the project Cookbook (including index pages)">

    <!-- Generate GraphViz dot notation file using XSLT for each cookbook example -->
    <xslt basedir="${src.examples.dir}" destdir="${build.examples.images.dir}" style="${src.examples.tools.dir}/xslt/oa3toDot.xsl">
      <patternset refid="example.xml.config.files" />
      <param name="oaVersion" expression="${ant.project.name} version ${oa3.version.major} ${oa3.version.minor} build ${build.number}" />
      <!-- Workaround so XSLT can find out name of file including relative path: (must have trailing slash) -->
      <!-- <param name="filepathGlobPrefix1" expression="HeadURL: https://www.openadaptor.org/svn/openadaptor3/${examples.relative.basename}/example/" /> -->
      <!-- <param name="filepathGlobPrefix2" expression="HeadURL: https://openadaptor3.openadaptor.org/svn/openadaptor3/${examples.relative.basename}/example/" /> -->
      <param name="filepathGlobPrefix1" expression="${filecomment.path.pattern1}" />
      <param name="filepathGlobPrefix2" expression="${filecomment.path.pattern2}" />
      <param name="filepathGlobPrefix3" expression="${filecomment.path.pattern3}" />
      <param name="filepathGlobPrefix4" expression="${filecomment.path.pattern4}" />
      <xmlcatalog refid="oa3XmlCatalog" />
      <mapper type="glob" from="*.xml" to="*.dot" />
    </xslt>


    <!-- Generate GIF for each cookbook example from GraphViz dot notation file -->
    <!-- Windows, Unix/Linux, Mac binaries and source code: http://www.graphviz.org/Download.php -->
    <mapper id="outImage" type="glob" from="*.dot" to="${build.examples.images.dir}/*.${graphviz.image.fileextension}" />

    <apply executable="${graphviz.dot}" dest="${build.examples.images.dir}" failifexecutionfails="false">
      <arg value="-T${graphviz.image.fileextension}" />
      <srcfile />
      <fileset dir="${build.examples.images.dir}" includes="**/*.dot" />
      <mapper refid="outImage" />
      <redirector>
        <outputmapper refid="outImage" />
      </redirector>
    </apply>


    <!-- Generate image map for each cookbook example from GraphViz dot notation file -->
    <!-- Windows, Unix/Linux, Mac binaries and source code: http://www.graphviz.org/Download.php -->
    <mapper id="outCmap" type="glob" from="*.dot" to="${build.examples.images.dir}/*.map" />

    <apply executable="${graphviz.dot}" dest="${build.examples.images.dir}" failifexecutionfails="false">
      <arg value="-Tcmapx" />
      <srcfile />
      <fileset dir="${build.examples.images.dir}" includes="**/*.dot" />
      <mapper refid="outCmap" />
      <redirector>
        <outputmapper refid="outCmap" />
      </redirector>
    </apply>


    <!-- Clean up the generated dot files at this point -->
    <delete>
      <fileset dir="${build.examples.images.dir}" includes="**/*.dot" />
    </delete>


    <!-- Generate html page using XSLT for each cookbook example -->
    <xslt basedir="${src.examples.dir}" destdir="${build.examples.docs.dir}" style="${src.examples.tools.dir}/xslt/beans.xsl">
      <patternset refid="example.xml.config.files" />
      
      <param name="oaVersion" expression="${ant.project.name} version ${oa3.version.major} ${oa3.version.minor} build ${build.number}" />
      <param name="imageFileExtension" expression="${graphviz.image.fileextension}" />
      <!-- Workaround so XSLT can find out name of file including relative path: (must have trailing slash) -->
      <!-- <param name="filepathGlobPrefix1" expression="HeadURL: https://www.openadaptor.org/svn/openadaptor3/${examples.relative.basename}/example/" /> -->
      <!-- <param name="filepathGlobPrefix2" expression="HeadURL: https://openadaptor3.openadaptor.org/svn/openadaptor3/${examples.relative.basename}/example/" /> -->
      <param name="filepathGlobPrefix1" expression="${filecomment.path.pattern1}" />
      <param name="filepathGlobPrefix2" expression="${filecomment.path.pattern2}" />
      <param name="filepathGlobPrefix3" expression="${filecomment.path.pattern3}" />
      <param name="filepathGlobPrefix4" expression="${filecomment.path.pattern4}" />
      <param name="showJavaDocLinks" expression="true" />
      <param name="docsRelativeToTools" expression="../../../../www/exampleScenarioDocs/" />
      <param name="showConfigIndexLinks" expression="true" />
      <!-- JavaDoc relative path or an http(s) URL: (must have trailing slash) -->
      <param name="javaDocPath" expression="../javadocs/" />
      <param name="xmlRelative" expression="./" />
      <xmlcatalog refid="oa3XmlCatalog" />
      <mapper type="glob" from="*.xml" to="*.html" />
    </xslt>

  </target>
  
  <!-- Generates the project Cookbook (including index pages) -->
  <target name="docs" depends="docs_prepare,docs_images" description="Generate the documentation">

    <!-- Combine all cookbook examples into a single file (so we can later generate index) -->
    <concat destfile="${build.examples.docs.dir}/cookbook_combined.xml" fixlastline="yes">
      <fileset dir="${src.examples.dir}">
        <patternset refid="example.xml.config.files" />
      </fileset>
      <filterchain>
        <tokenfilter>
          <!-- Apply regexps to whole of input file at once: -->
          <filetokenizer />
          <!-- Pull the name of each cookbook example out of its CVS Header comment,
               and add as "id" attribute to its "beans" element (preserving schema namespace attributes): -->
		  <replaceregex pattern="(${filecomment.path.pattern1})([^.]+?)(\.xml .*?&lt;beans)[^&gt;]*&gt;" flags="sg" replace="\1\2\3 id=&quot;\2&quot;&gt;" />
          <replaceregex pattern="(${filecomment.path.pattern2})([^.]+?)(\.xml .*?&lt;beans)[^&gt;]*&gt;" flags="sg" replace="\1\2\3 id=&quot;\2&quot;&gt;" />
          <replaceregex pattern="(${filecomment.path.pattern3})([^.]+?)(\.xml .*?&lt;beans)[^&gt;]*&gt;" flags="sg" replace="\1\2\3 id=&quot;\2&quot;&gt;" />
          <replaceregex pattern="(${filecomment.path.pattern4})([^.]+?)(\.xml .*?&lt;beans)[^&gt;]*&gt;" flags="sg" replace="\1\2\3 id=&quot;\2&quot;&gt;" />
          <!-- Cope (dumbly) with up to 3 underscores in bean relative path filename (map to minus sign): -->
          <replaceregex pattern="(beans id=&quot;[^&quot;_]*?)_([^&quot;]*?&quot;)" flags="sg" replace="\1-\2" />
          <replaceregex pattern="(beans id=&quot;[^&quot;_]*?)_([^&quot;]*?&quot;)" flags="sg" replace="\1-\2" />
          <replaceregex pattern="(beans id=&quot;[^&quot;_]*?)_([^&quot;]*?&quot;)" flags="sg" replace="\1-\2" />
          <!-- Cope (dumbly) with up to 7 levels of directory nesting: -->
          <replaceregex pattern="(beans id=&quot;[^&quot;/]*?)/([^&quot;]*?&quot;)" flags="sg" replace="\1_\2" />
          <replaceregex pattern="(beans id=&quot;[^&quot;/]*?)/([^&quot;]*?&quot;)" flags="sg" replace="\1_\2" />
          <replaceregex pattern="(beans id=&quot;[^&quot;/]*?)/([^&quot;]*?&quot;)" flags="sg" replace="\1_\2" />
          <replaceregex pattern="(beans id=&quot;[^&quot;/]*?)/([^&quot;]*?&quot;)" flags="sg" replace="\1_\2" />
          <replaceregex pattern="(beans id=&quot;[^&quot;/]*?)/([^&quot;]*?&quot;)" flags="sg" replace="\1_\2" />
          <replaceregex pattern="(beans id=&quot;[^&quot;/]*?)/([^&quot;]*?&quot;)" flags="sg" replace="\1_\2" />
          <replaceregex pattern="(beans id=&quot;[^&quot;/]*?)/([^&quot;]*?&quot;)" flags="sg" replace="\1_\2" />
          <!-- Strip out the first two lines of every cookbook example (as inappropriate): -->
          <replaceregex pattern="&lt;\?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;\?&gt;" flags="g" replace="" />
          <replaceregex pattern="&lt;!DOCTYPE beans PUBLIC &quot;-//SPRING//DTD BEAN//EN&quot; &quot;http://www.springframework.org/dtd/spring-beans.dtd&quot;&gt;" flags="g" replace="" />
          <!-- Add xml version declaration back once at top of file, and open cookbook element: -->
          <replaceregex pattern="^" flags="m" replace="&lt;\?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;\?&gt;
&lt;cookbook&gt;" />
          <!-- Close cookbook element at end of file: -->
          <replaceregex pattern="$" flags="s" replace="&lt;/cookbook&gt;" />
        </tokenfilter>
      </filterchain>
    </concat>


    <!-- Filter as we copy the files: -->
    <mkdir dir="${build.examples.images.dir}" />
    <copy todir="${build.examples.images.dir}" overwrite="true" failonerror="true" flatten="false">
      <fileset dir="${build.examples.images.dir}" includes="**/*.map" />
      <mapper type="glob" from="*.map" to="*.localmap" />
      <filterchain>
        <tokenfilter>
          <!-- Replace the HREF relative path with "../" (because map was originally built for use deep in images tree): -->
          <replaceregex pattern="( href=&quot;)[./]+([^./][^&quot;])" flags="sg" replace="\1./\2" />
        </tokenfilter>
      </filterchain>
    </copy>
    
    <!-- Copy the XML files: -->
    <mkdir dir="${build.examples.docs.dir}" />
    <copy todir="${build.examples.docs.dir}" overwrite="true" failonerror="true" flatten="false">
		<fileset dir="../">		
    		<include name="IntegrationScenarios/**/*.xml" />
    		<include name="QCTF/**/*.xml" />
			<include name="QCTFNG/**/*.xml" />
    		<include name="QCPT/**/*.xml" />
    		<exclude name="**/input/*.xml" />
    		<exclude name="**/output/*.xml" />
    		<exclude name="**/xslt/*.xml" />
  		</fileset>      
    </copy>


    <!-- Generate html page using XSLT: mapping cookbook examples to beans -->
    <xslt basedir="${build.examples.docs.dir}" destdir="${build.examples.docs.dir}" includes="cookbook_combined.xml" style="${src.examples.tools.dir}/xslt/cookbook2beans.xsl">
      <param name="oaVersion" expression="${ant.project.name} version ${oa3.version.major} ${oa3.version.minor} build ${build.number}" />
      <xmlcatalog refid="oa3XmlCatalog" />
      <mapper type="glob" from="cookbook_combined.xml" to="config2beans.html" />
    </xslt>

    <!-- Generate html page using XSLT: mapping beans to cookbook examples -->
    <xslt basedir="${build.examples.docs.dir}" destdir="${build.examples.docs.dir}" includes="cookbook_combined.xml" style="${src.examples.tools.dir}/xslt/beans2cookbook.xsl">
      <param name="oaVersion" expression="${ant.project.name} version ${oa3.version.major} ${oa3.version.minor} build ${build.number}" />
      <xmlcatalog refid="oa3XmlCatalog" />
      <mapper type="glob" from="cookbook_combined.xml" to="beans2config.html" />
    </xslt>

    <!-- Generate html image page using XSLT: containing node maps for all cookbook examples -->
    <xslt basedir="${build.examples.docs.dir}" destdir="${build.examples.images.dir}" includes="cookbook_combined.xml" style="${src.examples.tools.dir}/xslt/allnodemaps.xsl">
      <param name="oaVersion" expression="${ant.project.name} version ${oa3.version.major} ${oa3.version.minor} build ${build.number}" />
      <param name="imageFileExtension" expression="${graphviz.image.fileextension}" />
      <param name="docsRelativeToTools" expression="../../../../www/exampleScenarioDocs/" />
      <xmlcatalog refid="oa3XmlCatalog" />
      <mapper type="glob" from="cookbook_combined.xml" to="allimages.html" />
    </xslt>

    <!-- Generate main index.html page using XSLT: containing summary of cookbook information -->
    <xslt basedir="${build.examples.docs.dir}" destdir="${build.examples.docs.dir}" includes="cookbook_combined.xml" style="${src.examples.tools.dir}/xslt/index.xsl">
      <param name="oaVersion" expression="${ant.project.name} version ${oa3.version.major} ${oa3.version.minor} build ${build.number}" />
      <xmlcatalog refid="oa3XmlCatalog" />
      <mapper type="glob" from="cookbook_combined.xml" to="index.html" />
    </xslt>

    <!-- Tidy up temporary XML file used for index generation -->
    <delete file="${build.examples.docs.dir}/cookbook_combined.xml" />

    <!-- Clean up the generated map files at this point -->
    <delete>
      <fileset dir="${build.examples.images.dir}" includes="**/*.map" />
      <fileset dir="${build.examples.images.dir}" includes="**/*.localmap" />
    </delete>

  </target>
</project>