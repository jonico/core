<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">
	<description>
		<![CDATA[    
  This sample imports tracker data contained in a CSV file or some other flatfile
  with a non-comma character as a separator into an SFEE tracker.
  
  This sample assumes that the artifacts represented in the flatfile are freshly
  imported into the SFEE tracker.
  
    lib
    lib/openadaptor.jar
    lib/openadaptor-spring.jar
    lib/openadaptor-depends.jar
  ]]>
	</description>
	<bean id="SystemPropertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="ignoreResourceNotFound" value="false" />
		<property name="systemPropertiesMode">
			<bean
				id="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer.SYSTEM_PROPERTIES_MODE_OVERRIDE"
				class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean" />
		</property>
		<property name="locations">
			<description>
				Properties configured in these property files will be imported into the wiring file.
				The file ccf.properties contains the properties for the CCF core components.
				sfee.properties file contains the properties for the SFEE plugin classes.
			</description>
			<list>
				<value>classpath:ccf.properties</value>
				<value>classpath:sfee.properties</value>
			</list>
		</property>
	</bean>
	<bean id="Adaptor" class="org.openadaptor.core.adaptor.Adaptor">
		<property name="messageProcessor" ref="Router" />
	</bean>

	<bean id="Router" class="org.openadaptor.core.router.Router">
		<description>
			Defines how different openadaptor components are connected to each other
		</description>
		<property name="processMap">
			<map>
				<entry key-ref="InputCSVFileReader" value-ref="InputCSVString2OrderedMapConverter" />
				<entry key-ref="InputCSVString2OrderedMapConverter" value-ref="OrderedMap2XmlMapConverter" />
				<entry key-ref="OrderedMap2XmlMapConverter" value-ref="XmlMap2GenericArtifactConverter" />
				<entry key-ref="XmlMap2GenericArtifactConverter"
					value-ref="SFEEWriter" />
			</map>
		</property>
	</bean>

	<bean id="InputCSVFileReader"
		class="org.openadaptor.auxil.connector.iostream.reader.FileReadConnector">
		<description>
			This read connector reads lines from a file.
		</description>
		<property name="filename" value="input/input.txt" />
		<property name="dataReader">
			<bean
				class="org.openadaptor.auxil.connector.iostream.reader.string.LineReader">
				<description>
					This (regular expression) will exclude comments
					(lines beginning with #)
				</description>
				<property name="excludeRegex" value="^#.*" />
			</bean>
		</property>
	</bean>

	<bean id="InputCSVString2OrderedMapConverter"
		class="org.openadaptor.auxil.convertor.delimited.DelimitedStringToOrderedMapConvertor">
		<description>
			Strings are delimited by commas; each value in the string
			will be associated with the corresponding 'name' in the
			generated map. If the source file has some other character as the delimiter
			configure the delimiter property with that character.
		</description>
		<property name="delimiter" value="," />
		<property name="firstRecordContainsFieldNames" value="true" />
		<property name="stripEnclosingQuotes" value="true" />
		<property name="protectQuotedFields" value="true" />
	</bean>

	<bean id="OrderedMap2XmlMapConverter"
		class="org.openadaptor.auxil.convertor.xml.OrderedMapToXmlConvertor">
		<description>Convert the map into XML</description>
		<property name="rootElementTag" value="record" />
		<property name="returnXmlAsString" value="false"/>
	</bean>
	
	<bean id="XmlMap2GenericArtifactConverter" class="com.collabnet.ccf.core.transformer.XsltProcessor">
		<property name="xsltFile" value="xslt/xmlmap2genericartifact.xsl" />
	</bean>
	<bean id="SFEEConnectionManager"
		class="com.collabnet.ccf.core.eis.connection.ConnectionManager">
		<description>
			The connection manager implements a connection pooling mechanism where the 
			connections to multiple systems are cached for the readers and writers
			to retrieve when needed. Before returning the connection to the client
			the connection manager checks if the connection is live and only returns 
			valid connections.
			It assigns and manages one pool per repository.
		</description>
		<property name="maxConnectionsPerPool" value="5"></property>
		<property name="maxIdleTimeForConnection" value="600000" />
		<property name="scavengerInterval" value="120000"></property>
		<property name="connectionFactory" ref="SFEEConnectionFactory"></property>
	</bean>
	<bean id="SFEEConnectionFactory"
		class="com.collabnet.ccf.pi.sfee.v44.SFEEConnectionFactory">
		<description>
			This bean is an implementation of the com.collabnet.ccf.core.eis.connection.ConnectionFactory
			interface. It is responsible to create and close an connection for a given
			repository.
			In this case SFEEConnectionFactory manages com.collabnet.ccf.pi.sfee.v44.Connection
			objects.
		</description>
	</bean>
	<bean id="SFEEWriter"
		class="com.collabnet.ccf.pi.sfee.v44.SFEEWriter">
		<description>
			This data processor is responsible for writing the artifacts coming from the
			EntitySerive into the target SFEE system.
			It converts/extracts the data from the Generic Artifact XML and pushes to the
			target SFEE system.
		</description>
		<property name="username" value="${sfee.server.1.username}" />
		<property name="password" value="${sfee.server.1.password}" />
		<property name="serverUrl"
			value="${sfee.server.1.url}" />
		<property name="createToken" value="create" />
		<property name="updateComment"
			value="Synchronized by Connector user" />
		<property name="connectionManager" ref="SFEEConnectionManager"></property>
	</bean>
</beans>