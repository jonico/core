<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">
 
  <description><![CDATA[
  Simple test wiring to write out the first generic artifact!
  ]]></description>
  
  <bean class="org.openadaptor.core.jmx.MBeanServer">
    <description>Embed this in your config to expose jmx interface via http and rmi.</description>
    <constructor-arg value="8082"/>
  </bean>
  
  <bean id="SystemUtil" class="org.openadaptor.util.SystemUtil">
    <description>Embed this in your config to expose useful management bean.</description>
  </bean>
  
  <bean id="LogAdmin" class="org.openadaptor.thirdparty.log4j.LogAdmin">
    <description>Embed this in your config to expose log4j management.</description>
  </bean>
  
  <bean id="Adaptor" class="org.openadaptor.core.adaptor.Adaptor">
    <property name="messageProcessor" ref="Router"/>
  </bean>
  
  <bean id="Router" class="org.openadaptor.core.router.Router">
    
    <property name="processMap">
      <map>
			<entry key-ref="SimplePollingReader" value-ref="QCReader"/>
			<entry key-ref="QCReader"> 
        		<list>
        		 	<ref bean="QCEntityService"/>
        			<ref bean="Writer"/>
          		</list>
        	</entry>
        	<entry key-ref="QCEntityService" value-ref="QCWriter"/>
        	<entry key-ref="QCWriter" value-ref="MappingDBUpdater" /> 
      </map>  
    </property>
    <property name="exceptionProcessor" ref="ExceptionHandler"/>
    <property name="discardMap">
      <map>
      <!--    <entry key-ref="Filter" value-ref="DiscardLog"/> -->
      </map>
    </property>
  </bean>
  
   <bean id="SimplePollingReader" class="com.collabnet.ccf.core.test.plugins.SimpleLoopingPollingReadConnector">
     <description>
       Poller which wraps QCReader and every 5 seconds.
     </description>              
     <property name="pollLimit" value="-1"/>
     <property name="delegate" ref="QCDatabaseReader"/>
     <property name="pollIntervalSecs" value="5"/>
  </bean>
   
   <bean id="QCReader" class="com.collabnet.ccf.pi.qc.v90.QCReader">
     <description>
       Reads the modified defects from QC
     </description>              
     <property name="serverUrl" value="http://10.2.1.114:8080/qcbin"/>
     <property name="domain" value="QC_PLUGIN_TESTING"/>
     <property name="projectName" value="PRJ_2"/>
     <property name="userName" value="alex_qc"/>
     <property name="password" value=""/>
     <property name="keepAlive" value="true" />
  </bean>

	 	
  <bean id="QCReaderOutputVerificator" class="test.QAHelperClasses.QCReaderOutputVerificator">
  	<description>
       Verifies if the run output matches with the expected data 
  	</description>
  	<property name="fileName" value="C:\\Venugopal\\Eclipse\\ccf-workspace\\CCFJ\\src\\plugins\\HPQC\\test\\resultantGenericArtifact.xml"/>
  	<property name="serverUrl" value="http://10.2.1.114:8080/qcbin"/>
    <property name="domain" value="QC_PLUGIN_TESTING"/>
    <property name="projectName" value="PRJ_1"/>
    <property name="userName" value="admin"/>
    <property name="password" value="collabnet"/>
  </bean>
	

	
  <bean id="QCReaderOutputWriter" class="test.QAHelperClasses.QCReaderOutputWriter">
  	<description>
       Writes the Object array containing the list of genericArtifactDocuments coming in from QCReader into a file
       given as a property here. This file is accessed by the QCReaderOutputVerificator. 
  	</description>
  	<property name="fileName" value="C:\\Venugopal\\Eclipse\\ccf-workspace\\CCFJ\\src\\plugins\\HPQC\\test\\resultantGenericArtifact.xml"/>
  	<property name="serverUrl" value="http://10.2.1.114:8080/qcbin"/>
    <property name="domain" value="QC_PLUGIN_TESTING"/>
    <property name="projectName" value="PRJ_1"/>
    <property name="userName" value="admin"/>
    <property name="password" value="collabnet"/>
    <property name="keepAlive" value="true" />
  </bean>
  
  <bean id="QCEntityService" class="com.collabnet.ccf.pi.qc.v90.QCEntityService">
     <description>
     	This QCEntityService fills the targetArtifactId in the GenericArtifact and forwards it to the QCWriter.
	 </description>
     <property name="serverUrl" value="http://10.2.1.114:8080/qcbin"/>
     <property name="domain" value="QC_PLUGIN_TESTING"/>
     <property name="projectName" value="PRJ_1"/>
     <property name="userName" value="alex_qc"/>
     <property name="password" value=""/>
     <property name="keepAlive" value="true" />
  </bean>     
  
  <bean id="QCWriter" class="com.collabnet.ccf.pi.qc.v90.QCWriter">
     <description>
     	This QCWriter will write the data contained in the incoming document to QC.
	 </description>
     <property name="serverUrl" value="http://10.2.1.114:8080/qcbin"/>
     <property name="domain" value="QC_PLUGIN_TESTING"/>
     <property name="projectName" value="PRJ_1"/>
     <property name="userName" value="alex_qc"/>
     <property name="password" value=""/>
     <property name="keepAlive" value="true" />
  </bean>      
    	
  <bean id="Writer" class="org.openadaptor.auxil.connector.iostream.writer.FileWriteConnector"/>
  <bean id="ExceptionHandler" class="org.openadaptor.auxil.connector.iostream.writer.FileWriteConnector"/>

  <bean id="QCDatabaseReader" class="org.openadaptor.auxil.connector.jdbc.reader.JDBCReadConnector">
    <description>Reader which polls database using configured SQL.</description>
    <property name="jdbcConnection" ref="JdbcConnectionRead"/>
    <!-- batch size of 0 or less means process all rows in one message batch. -->
    <!-- batch size of one means process one row per message and so on -->
    <property name="batchSize" value="0"/>
    <property name="resultSetConverter" ref="QCResultSetConverter"/>
    <property name="sql">
      <value>
        		select A.REPOSITORY_ID AS SOURCE_REPOSITORY_ID,
				A.REPOSITORY_KIND AS SOURCE_REPOSITORY_KIND, C.SYSTEM_ID
				AS SOURCE_SYSTEM_ID, C.SYSTEM_KIND AS
				SOURCE_SYSTEM_KIND, B.REPOSITORY_ID AS
				TARGET_REPOSITORY_ID, B.REPOSITORY_KIND AS
				TARGET_REPOSITORY_KIND, D.SYSTEM_ID AS TARGET_SYSTEM_ID,
				D.SYSTEM_KIND AS TARGET_SYSTEM_KIND,
				REPOSITORY_MAPPING.LAST_READ_TIME AS FROM_TIME,
				REPOSITORY_MAPPING.VERSION AS VERSION,
				REPOSITORY_MAPPING.TRANSACTION_ID AS TRANSACTION_ID from
				REPOSITORY_INFO A,REPOSITORY_INFO B, SYSTEM_INFO C,
				SYSTEM_INFO D, REPOSITORY_MAPPING
				WHERE REPOSITORY_MAPPING.SOURCE_REPOSITORY_INFO_ID =
				A.ID AND REPOSITORY_MAPPING.TARGET_REPOSITORY_INFO_ID =
				B.ID AND A.SYSTEM_INFO_ID = C.ID AND B.SYSTEM_INFO_ID =
				D.ID
      </value>
    </property>
  </bean>

  <bean id="JdbcConnectionRead" class="org.openadaptor.auxil.connector.jdbc.JDBCConnection">
    <description>This defines jdbc connection.</description>
    <property name="driver" value="org.hsqldb.jdbcDriver"/>
    <property name="url" value="jdbc:hsqldb:hsql://localhost/xdb"/>
    <property name="username" value="sa"/>
    <property name="password" value=""/>
  </bean>
  <bean id="MappingDBUpdater" class="trial2.MappingDBUpdater">
	<description>Simply display the artifacts</description>
	<property name="jdbcConnection" ref="JdbcConnectionRead" />
  </bean>
	
  <bean id="QCResultSetConverter" class="org.openadaptor.auxil.connector.jdbc.reader.xml.ResultSetToXMLConverter">
	<property name="convertToString" value="false"/>
	<property name="rootElement" value="EmptySyncInf"/>  
  </bean>
  
 
</beans>
