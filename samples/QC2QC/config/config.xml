<?xml version="1.0" encoding="UTF-8"?>
<!-- 
	$Author$
	$HeadURL$
-->

<!--
 Copyright 2009 CollabNet, Inc. ("CollabNet")

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">

	<description><![CDATA[
   This is the configuration for the CollabNet Connector Framework sample 
   "Two way wiring Scenario". This wiring file configures a QC tracker and a QC tracker
   to sync with each other.
  ]]></description>

	<bean class="org.openadaptor.core.jmx.MBeanServer">
		<description>
			Embed this in your config to expose jmx interface via http
			and rmi.
		</description>
		<constructor-arg value="8082" />
	</bean>

	<bean id="SystemUtil" class="org.openadaptor.util.SystemUtil">
		<description>
			Embed this in your config to expose useful management bean.
		</description>
	</bean>

	<bean id="LogAdmin"
		class="org.openadaptor.thirdparty.log4j.LogAdmin">
		<description>
			Embed this in your config to expose log4j management.
		</description>
	</bean>
	<bean id="SystemPropertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="ignoreResourceNotFound" value="false" />
		<property name="systemPropertiesMode">
			<bean
				id="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer.SYSTEM_PROPERTIES_MODE_OVERRIDE"
				class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean" />
		</property>
		<property name="locations">
			<description>
				Properties configured in these property files will be imported into the wiring file.
				The file ccf.properties contains the properties for the CCF core components.
				sfee.properties file contains the properties for the TF plugin classes and
				qc.properties file contains the properties for the QC plugin classes.
			</description>
			<list>
				<value>classpath:ccf.properties</value>
				<value>classpath:qc.properties</value>
				<value>classpath:sfee.properties</value>
			</list>
		</property>
	</bean>
	<bean id="QC2QC" class="org.openadaptor.core.adaptor.Adaptor">
		<property name="messageProcessor" ref="Router" />
	</bean>

	<bean id="Router" class="org.openadaptor.core.router.Router">
		<description>
			The processMap property of this Router bean configures the processors
			that are wired together to ship the artifacts from the source repository
			to the target repository.
		</description>
		<property name="processMap">
			<map>
				<entry key-ref="ExceptionConvertor" value-ref="HospitalWriter"/>
				<entry key-ref="QC2QCSynchronizationStatusPollingReader"
					value-ref="QCReader" />
				<entry key-ref="QCReader"	value-ref="QC2QCGenericArtifactSchemaValidator" />
				<entry key-ref="QC2QCGenericArtifactSchemaValidator"	value-ref="QCEntityService" />	
				<entry key-ref="QCEntityService" value-ref="QCWriter" />
				<entry key-ref="QCWriter" value-ref="SynchronizationStatusAndIdentityMappingTableUpdater" />
			</map>
		</property>
<!--		<property name="exceptionProcessor" ref="ExceptionHandler" />-->
		<property name="exceptionProcessor" ref="ExceptionConvertor"/>
	</bean>
	
	<bean id="ExceptionConvertor" class="com.collabnet.ccf.core.hospital.CCFExceptionToOrderedMapConvertor"><property name="logMessageTemplate" value="${ccf.logMessageTemplate}" /><property name="timestampFormat" value="yyyy-MM-dd HH:mm:ss zzz"/>
		<property name="adaptor" ref="QC2QC"/>
	</bean>
	
	<bean id="HospitalWriter" class="org.openadaptor.auxil.connector.jdbc.writer.JDBCWriteConnector">
		<property name="jdbcConnection" ref="HospitalJDBCConnection" />
		<property name="writer">
		<bean
			class="org.openadaptor.auxil.connector.jdbc.writer.map.MapTableWriter">
			<property name="tableName" value="HOSPITAL" />
		</bean>
		</property>
	</bean>
	
	<bean id="HospitalJDBCConnection"
		class="org.openadaptor.auxil.connector.jdbc.JDBCConnection" scope="prototype">
		<description>
			This defines jdbc connection that will be used by the
			HospitalWriter
		</description>
		<property name="driver" value="${ccf.db.driver}" />
		<property name="url" value="${ccf.db.url}" />
		<property name="username" value="${ccf.db.username}" />
		<property name="password" value="${ccf.db.password}" />
	</bean>
	
	<bean id="QC2QCSynchronizationStatusPollingReader"
		class="com.collabnet.ccf.core.test.plugins.SimpleLoopingPollingReadConnector">
		<description>
			This polling connector polls the CCF database tables that contain the repository
			mapping and the synchronization info and feeds the details to the source repository
			reader piped down the line. Please refer the processMap configuration for the Router
			bean.
			
			In this case this polling reader reads the synchronization status using the database
			read connector configured in the property delegate.
			
			Polling interval seconds is configured as 0 to indicate that the polling reader should
			read from the database read connector continuously without and pauses in between.
		</description>
		<property name="pollLimit" value="-1" />
		<property name="delegate" ref="QC2QCSynchronizationStatusPollingReaderJdbcConnection" />
		<property name="pollIntervalSecs" value="0" /><property name="reconnectDelegateBetweenPolls" value="true"/>
	</bean>
	
	<bean id="QC2QCSynchronizationStatusPollingReaderJdbcConnection"
		class="org.openadaptor.auxil.connector.jdbc.reader.JDBCReadConnector">
		<description>
			This is the JDBC read connector used by the SynchronizationStatusPollingReader to read the
			repository mapping and the synchronization info.
		</description>
		<property name="jdbcConnection" ref="JDBCConnection" />
		<!-- batch size of 0 or less means process all rows in one message batch. -->
		<!-- batch size of one means process one row per message and so on -->
		<property name="batchSize" value="1" />
		<property name="resultSetConverter" ref="ResultSetConverter" />
		<property name="sql">
			<value>SELECT SOURCE_REPOSITORY_ID, SOURCE_REPOSITORY_KIND, SOURCE_SYSTEM_ID, SOURCE_SYSTEM_KIND, TARGET_REPOSITORY_ID, TARGET_REPOSITORY_KIND, TARGET_SYSTEM_ID, TARGET_SYSTEM_KIND, LAST_SOURCE_ARTIFACT_MODIFICATION_DATE, LAST_SOURCE_ARTIFACT_VERSION, LAST_SOURCE_ARTIFACT_ID, CONFLICT_RESOLUTION_PRIORITY, SOURCE_SYSTEM_TIMEZONE, TARGET_SYSTEM_TIMEZONE, SOURCE_SYSTEM_ENCODING, TARGET_SYSTEM_ENCODING FROM SYNCHRONIZATION_STATUS WHERE SOURCE_SYSTEM_KIND='QC' AND TARGET_SYSTEM_KIND='QC'</value>
		</property>
	</bean>
	
	<bean id="QC2QCGenericArtifactSchemaValidator" class="com.collabnet.ccf.core.utils.XmlValidator">
    	<description>This processor validates whether the artifacts produced by the TF reader are generic artifact schema compliant.</description>
    	<property name="schemaURL" value="config/genericartifactschema.xsd"/>
  	</bean>
  	
	<bean id="QCReader" class="com.collabnet.ccf.pi.qc.v90.QCReader">
		<description>
			This reader reads the modified artifacts in the QC system's tracker configured in the
			${qc.server.1.url} and the sync info tables. It reads all the related dependent artifact details
			and converts them into Generic Artifact XML document format and sends to the
			next component in the pipeline. The next component in the pipeline may be
			an XSLT transformer component such as com.collabnet.ccf.core.transformer.XsltProcessor
			or an EntityService component depending on the target TF tracker needs the data
			to be translated to fit into its fields or not.
		</description>
		<property name="serverUrl" value="${qc.system.1.url}" />
		<property name="userName" value="${qc.system.1.username}" />
		<property name="password" value="${qc.system.1.password}" />
		<property name="connectionManager" ref="QCConnectionManager"></property>
		<property name="sleepInterval" value="100"></property>
		<property name="maxAttachmentSizePerArtifact" value="${qc.max.attachmentsize.per.artifact}" />
		<property name="shipAttachments" value="true"/>
	</bean>
	<bean id="QCConnectionManager"
		class="com.collabnet.ccf.core.eis.connection.ConnectionManager">
		<property name="maxConnectionsPerPool" value="5"></property>
		<property name="maxIdleTimeForConnection" value="600000" />
		<property name="scavengerInterval" value="120000"></property>
		<property name="connectionFactory" ref="QCConnectionFactory"></property>
	</bean>
	<bean id="QCConnectionFactory"
		class="com.collabnet.ccf.pi.qc.v90.QCConnectionFactory">
	</bean>
	
	<bean id="SynchronizationStatusAndIdentityMappingTableUpdater"
		class="com.collabnet.ccf.core.config.MappingDBUpdater">
		<description>
			This component is responsible for creating the identity mapping for newly created
			artifacts in the target system. It also updates the synchronization status for a 
			particular repository. For TF systems the synchronization info is the last
			modified time of the last shipped artifact.
			If the EntityService determines the artifact action as create (that is this artifact
			is a new artifact in the source system and doesn't have its identity mapping filled
			in the Sync info tables) then the writer component creates the artifact in the target
			system and populates the target artifact id in the Generic Artifact XML.
			The SynchronizationStatusAndIdentityMappingTableUpdater then takes the target artifact
			id and creates an identity mapping entry for the source and target artifact ids.
		</description>
		<property name="synchronizationStatusDatabaseUpdater" ref="SynchronizationStatusDatabaseUpdater"></property>
		<property name="identityMappingDatabaseReader" ref="IndentityMappingDatabaseReader" />
		<property name="identityMappingDatabaseUpdater" ref="IdentityMappingDatabaseUpdater" />
		<property name="identityMappingDatabaseInserter"
			ref="IdentityMappingDatabaseInserter">
		</property>
	</bean>
	<bean id="ResultSetConverter"
		class="org.openadaptor.auxil.connector.jdbc.reader.xml.ResultSetToXMLConverter">
		<property name="convertToString" value="false" />
		<property name="rootElement" value="EmptySyncInf" />
	</bean>
	
	<bean id="IdentityMappingDatabaseInserter"
		class="org.openadaptor.auxil.connector.jdbc.writer.JDBCWriteConnector">
		<description>
			This component updates the synchronization status for the current artifact.
		</description>
		<property name="writer" ref="IdentityMappingTableInserter"></property>
		<property name="jdbcConnection"
			ref="JDBCConnection">
		</property>
	</bean>
	<bean id="QCTransformer"
		class="com.collabnet.ccf.core.transformer.XsltProcessor">
		<description>The xsltDir specifies the directory in which the xsl files are contained. The naming conventions
		for the xsl files need to be followed. 
		Name of an xsl file should be: sourceSystem+sourceRepository+targetSystem+targetRepository.xsl 
		</description>
		<!-- <property name="xsltFile" value="${ccf.sfee2qc.xsltFile}" />  -->
		<property name="xsltDir" value="xslt/" />
	</bean>
	<bean id="QCEntityService"
		class="com.collabnet.ccf.core.EntityService">
		<description>
			This component is responsible for determining if the current artifact that is being
			shipped is to be created or updated in the target TF system. It determines the artifact
			action by checking if the artifact has an identity mapping already.
			If the identity mapping does not exist then the EntityService marks this artifact
			action as create otherwise update. Please refer the SynchronizationStatusAndIdentityMappingTableUpdater
			component.
		</description>
		<property name="identityMappingDatabaseReader" ref="IndentityMappingDatabaseReader" />
	</bean>
	<bean id="QCWriter" class="com.collabnet.ccf.pi.qc.v90.QCWriter">
		<description>
			This QCWriter will write the data contained in the incoming
			document to QC.
		</description>
		<property name="serverUrl" value="${qc.system.1.url}" />
		<property name="userName" value="${qc.system.1.username}" />
		<property name="password" value="${qc.system.1.password}" />
		<property name="connectionManager" ref="QCConnectionManager"></property>
	</bean>
	
	<bean id="IdentityMappingTableInserter"
		class="org.openadaptor.auxil.connector.jdbc.writer.map.MapTableWriter">
		<description>
			This is the writer object that writes the artifact mapping
			information into the database table.
		</description>
		<property name="tableName" value="IDENTITY_MAPPING"></property>
		<property name="outputColumns">
			<list>
				<value>SOURCE_SYSTEM_ID</value>
				<value>SOURCE_REPOSITORY_ID</value>
				<value>TARGET_SYSTEM_ID</value>
				<value>TARGET_REPOSITORY_ID</value>
				<value>SOURCE_SYSTEM_KIND</value>
				<value>SOURCE_REPOSITORY_KIND</value>
				<value>TARGET_SYSTEM_KIND</value>
				<value>TARGET_REPOSITORY_KIND</value>
				<value>SOURCE_ARTIFACT_ID</value>
				<value>TARGET_ARTIFACT_ID</value>
				<value>SOURCE_LAST_MODIFICATION_TIME</value>
				<value>TARGET_LAST_MODIFICATION_TIME</value>
				<value>SOURCE_ARTIFACT_VERSION</value>
				<value>TARGET_ARTIFACT_VERSION</value>
				<value>ARTIFACT_TYPE</value>
				<value>DEP_CHILD_SOURCE_ARTIFACT_ID</value>
				<value>DEP_CHILD_SOURCE_REPOSITORY_ID</value>
				<value>DEP_CHILD_SOURCE_REPOSITORY_KIND</value>
				<value>DEP_CHILD_TARGET_ARTIFACT_ID</value>
				<value>DEP_CHILD_TARGET_REPOSITORY_ID</value>
				<value>DEP_CHILD_TARGET_REPOSITORY_KIND</value>
				<value>DEP_PARENT_SOURCE_ARTIFACT_ID</value>
				<value>DEP_PARENT_SOURCE_REPOSITORY_ID</value>
				<value>DEP_PARENT_SOURCE_REPOSITORY_KIND</value>
				<value>DEP_PARENT_TARGET_ARTIFACT_ID</value>
				<value>DEP_PARENT_TARGET_REPOSITORY_ID</value>
				<value>DEP_PARENT_TARGET_REPOSITORY_KIND</value>
			</list>
		</property>
	</bean>
	<bean id="IndentityMappingDatabaseReader"
		class="org.openadaptor.auxil.connector.jdbc.reader.JDBCReadConnector">
		<description>
			This database reader component reads the target artifact id from the databse
			for a given source artifact id and the target repository and system information.
		</description>
		<property name="jdbcConnection"
			ref="JDBCConnection" />
		<!-- batch size of 0 or less means process all rows in one message batch. -->
		<!-- batch size of one means process one row per message and so on -->
		<property name="batchSize" value="0" />
		<property name="sql">
			<value>SELECT TARGET_ARTIFACT_ID, SOURCE_LAST_MODIFICATION_TIME, SOURCE_ARTIFACT_VERSION, TARGET_ARTIFACT_VERSION FROM IDENTITY_MAPPING WHERE SOURCE_SYSTEM_ID='?' AND SOURCE_REPOSITORY_ID='?' AND TARGET_SYSTEM_ID='?' AND TARGET_REPOSITORY_ID='?' AND SOURCE_ARTIFACT_ID='?' AND ARTIFACT_TYPE='?'</value>
		</property>
	</bean>
	<bean id="JDBCConnection"
		class="org.openadaptor.auxil.connector.jdbc.JDBCConnection" scope="prototype">
		<description>
			This defines a jdbc connection that will be used by the
			SynchronizationStatusDatabaseReader, IdentityMappingDatabaseReader and
			SynchronizationStatusDatabaseWriter
		</description>
		<property name="driver" value="${ccf.db.driver}" />
		<property name="url" value="${ccf.db.url}" />
		<property name="username" value="${ccf.db.username}" />
		<property name="password" value="${ccf.db.password}" />
	</bean>
	
	<bean id="IdentityMappingDatabaseUpdater"
		class="org.openadaptor.auxil.connector.jdbc.writer.JDBCWriteConnector">
		<property name="writer" ref="IdentityMappingTableUpdater"></property>
		<property name="jdbcConnection"
			ref="JDBCConnection">
		</property>
	</bean>
	<bean id="IdentityMappingTableUpdater"
		class="com.collabnet.ccf.core.db.MapTableUpdater">
		<description>
			This is the writer object that writes the artifact mapping
			information into the database table.
		</description>
		<property name="tableName" value="IDENTITY_MAPPING"></property>
		<property name="sql" value="UPDATE IDENTITY_MAPPING SET SOURCE_LAST_MODIFICATION_TIME=?, TARGET_LAST_MODIFICATION_TIME=?, SOURCE_ARTIFACT_VERSION=?, TARGET_ARTIFACT_VERSION=? WHERE SOURCE_SYSTEM_ID=? AND SOURCE_REPOSITORY_ID=? AND TARGET_SYSTEM_ID=? AND TARGET_REPOSITORY_ID=? AND SOURCE_ARTIFACT_ID=? AND ARTIFACT_TYPE=?"></property>
		<property name="outputColumns">
			<list>
				<value>SOURCE_LAST_MODIFICATION_TIME</value>
				<value>TARGET_LAST_MODIFICATION_TIME</value>
				<value>SOURCE_ARTIFACT_VERSION</value>
				<value>TARGET_ARTIFACT_VERSION</value>
				<value>SOURCE_SYSTEM_ID</value>
				<value>SOURCE_REPOSITORY_ID</value>
				<value>TARGET_SYSTEM_ID</value>
				<value>TARGET_REPOSITORY_ID</value>
				<value>SOURCE_ARTIFACT_ID</value>
				<value>ARTIFACT_TYPE</value>
			</list>
		</property>
	</bean>
	<bean id="SynchronizationStatusDatabaseUpdater"
		class="org.openadaptor.auxil.connector.jdbc.writer.JDBCWriteConnector">
		<property name="writer" ref="SynchronizationStatusTableUpdater"></property>
		<property name="jdbcConnection"
			ref="JDBCConnection">
		</property>
	</bean>
	<bean id="SynchronizationStatusTableUpdater"
		class="com.collabnet.ccf.core.db.MapTableUpdater">
		<description>
			This is the writer object that writes the artifact mapping
			information into the database table.
		</description>
		<property name="tableName" value="SYNCHRONIZATION_STATUS"></property>
		<property name="sql" value="UPDATE SYNCHRONIZATION_STATUS SET LAST_SOURCE_ARTIFACT_MODIFICATION_DATE=?, LAST_SOURCE_ARTIFACT_VERSION=?, LAST_SOURCE_ARTIFACT_ID=? WHERE SOURCE_SYSTEM_ID=? AND SOURCE_REPOSITORY_ID=? AND TARGET_SYSTEM_ID=? AND TARGET_REPOSITORY_ID=? "></property>
		<property name="outputColumns">
			<list>
				<value>LAST_SOURCE_ARTIFACT_MODIFICATION_DATE</value>
				<value>LAST_SOURCE_ARTIFACT_VERSION</value>
				<value>LAST_SOURCE_ARTIFACT_ID</value>
				<value>SOURCE_SYSTEM_ID</value>
				<value>SOURCE_REPOSITORY_ID</value>
				<value>TARGET_SYSTEM_ID</value>
				<value>TARGET_REPOSITORY_ID</value>
			</list>
		</property>
	</bean>
	<!--<bean id="ExceptionHandler" class="com.collabnet.ccf.core.hospital.Ambulance">
  		<description>
			The ambulance class catches all the exceptions that are thrown and not caught
			by any of the components in the pipe and logs the infromation such as the component
			that threw this exception and the input Generic Artifact xml document or the
			sync info db xml document.
		</description>
  		<property name="hospitalFileName" value="C:/hospital.txt"/>
  	</bean>
-->
</beans>
