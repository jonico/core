<?xml version="1.0" encoding="UTF-8"?>
	<!--
		$Author$
		$HeadURL$
	-->
	<!--
		Copyright 2009 CollabNet, Inc. ("CollabNet") Licensed under the Apache
		License, Version 2.0 (the "License"); you may not use this file except
		in compliance with the License. You may obtain a copy of the License
		at http://www.apache.org/licenses/LICENSE-2.0 Unless required by
		applicable law or agreed to in writing, software distributed under the
		License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
		CONDITIONS OF ANY KIND, either express or implied. See the License for
		the specific language governing permissions and limitations under the
		License.
	-->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">
	<description><![CDATA[
   This wiring synchronizes a QC system with an TF/CSFE system
   To get a bidirectional synchronization, just start the TF/CSFE To QC scenario as well.
  ]]></description>
	<bean class="org.openadaptor.core.jmx.MBeanServer">
		<description>
			Embed this in your config to expose jmx interface via http
			and rmi.
		</description>
	</bean>
	<bean id="SystemUtil" class="org.openadaptor.util.SystemUtil">
		<description>
			Embed this in your config to expose useful management bean.
		</description>
	</bean>
	<bean id="LogAdmin" class="org.openadaptor.thirdparty.log4j.LogAdmin">
		<description>
			Embed this in your config to expose log4j management.
		</description>
	</bean>
	<bean id="SystemPropertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="ignoreResourceNotFound" value="false" />
		<property name="systemPropertiesMode">
			<bean
				id="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer.SYSTEM_PROPERTIES_MODE_OVERRIDE"
				class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean" />
		</property>
		<property name="properties">
			<props>
				<prop key="ccf.direction.sleepinterval">1000</prop>
				<prop key="ccf.direction.autorestartperiod">21600</prop>
				<prop key="ccf.direction.identityMapEventWaitCount">8</prop>
				<prop key="ccf.direction.identityMapEventWaitTime">500</prop>
				<prop key="ccf.direction.ship.attachments">true</prop>
				<prop key="ccf.direction.package.release.separator">&#160;>&#160;</prop>
				<prop key="ccf.direction.qc.delaybefore.attachment.download">0</prop>
				<prop key="ccf.direction.qc.releaseIdfields.containfilerelease.packagename">true</prop>
				<prop key="ccf.direction.qc.max.attachmentsize">10485760</prop>
			</props>
		</property>
		<property name="locations">
			<description>
				Properties configured in these property files will be imported into the wiring file.
			</description>
			<list>
				<value>classpath:immutableLandscape.properties</value>
				<value>classpath:landscape.properties</value>
				<value>classpath:tf-participant.properties</value>
				<value>classpath:qc-participant.properties</value>
				<value>classpath:qc2tf.properties</value>
				<value>classpath:sql.properties</value>
			</list>
		</property>
	</bean>
	<bean id="QC2TF" class="org.openadaptor.core.adaptor.Adaptor">
		<property name="messageProcessor" ref="Router" />
	</bean>
	<bean id="Router" class="org.openadaptor.core.router.Router">
		<description>
			The processMap property of this Router bean configures the processors
			that are wired together to ship the artifacts from the source repository
			to the target repository.
		</description>
		<property name="processMap">
			<map>
				<entry key-ref="QC2TFSynchronizationStatusPollingReader"
					value-ref="QCReader" />
					
				<!-- This plugs in the polling hospital -->
				<entry key-ref="QCReader">
					<list>
						<ref bean="HospitalUpdatorSQLConverterReprocessed" />
						<ref bean="TFEntityService" />
					</list>
				</entry>
				<entry key-ref="TFEntityService" value-ref="TFTransformer" />
				<entry key-ref="TFTransformer" value-ref="TFWriter" />
				<entry key-ref="TFWriter"
					value-ref="SynchronizationStatusAndIdentityMappingTableUpdaterQC2TF" />
				
				<!-- This plugs in the polling hospital -->
				<entry key-ref="SynchronizationStatusAndIdentityMappingTableUpdaterQC2TF"
					value-ref="HospitalUpdatorSQLConverterFixed" />
					
				<!-- This plugs in the polling hospital -->
				<entry key-ref="HospitalUpdatorSQLConverterReprocessed"
					value-ref="HospitalUpdator" />
				
				<!-- This plugs in the polling hospital -->
				<entry key-ref="HospitalUpdatorSQLConverterFixed" value-ref="HospitalUpdator" />

				<!-- Exception processors -->
				<entry key-ref="ExceptionConvertor" value-ref="HospitalWriter" />
			</map>
		</property>
		<!-- <property name="exceptionProcessor" ref="ExceptionHandler" />  -->
		<property name="exceptionProcessor" ref="ExceptionConvertor"/><property name="metricsEnabled" value="true"/>
	</bean>
	<bean id="ExceptionConvertor"
		class="com.collabnet.ccf.core.hospital.CCFExceptionToOrderedMapConvertor"><property name="logMessageTemplate" value="${ccf.direction.logmessagetemplate}" /><property name="timestampFormat" value="yyyy-MM-dd HH:mm:ss zzz"/><property name="onlyQuarantineGenericArtifacts" value="true"/>
		<property name="adaptor" ref="QC2TF" />
	</bean>
	<bean id="HospitalWriter"
		class="org.openadaptor.auxil.connector.jdbc.writer.JDBCWriteConnector">
		<property name="jdbcConnection" ref="HospitalJDBCConnection" />
		<property name="writer">
			<bean
				class="org.openadaptor.auxil.connector.jdbc.writer.map.MapTableWriter">
				<property name="tableName" value="HOSPITAL_ENTRY" />
			</bean>
		</property>
	</bean>
	<bean id="HospitalJDBCConnection" class="com.collabnet.ccf.core.db.JDBCConnection"
		scope="prototype">
		<description>
			This defines jdbc connection that will be used by the
			HospitalWriter
		</description>
		<property name="driver" value="${ccf.db.driver}" />
		<property name="url" value="${ccf.db.url}" />
		<property name="username" value="${ccf.db.username}" />
		<property name="password" value="${ccf.db.password}" />
	</bean>
	<bean id="QC2TFSynchronizationStatusPollingReader"
		class="com.collabnet.ccf.core.test.plugins.SimpleLoopingPollingReadConnector">
		<description>
			This polling connector polls the CCF database tables that contain the repository
			mapping and the synchronization info and feeds the details to the source repository
			reader piped down the line. Please refer the processMap configuration for the Router
			bean.

			In this case this polling reader reads the synchronization status using the database
			read connector configured in the property delegate.

			Polling interval seconds is configured as 0 to indicate that the polling reader should
			read from the database read connector continuously without and pauses in between.
		</description>
		<property name="pollLimit" value="-1" />
		<property name="delegate"
			ref="QC2TFSynchronizationStatusPollingReaderJdbcConnection" />
		<property name="pollIntervalSecs" value="0" />
		<property name="reconnectDelegateBetweenPolls" value="false" />
	</bean>
	<bean id="QC2TFSynchronizationStatusPollingReaderJdbcConnection"
		class="org.openadaptor.auxil.connector.jdbc.reader.JDBCReadConnector">
		<description>
			This is the JDBC read connector used by the SynchronizationStatusPollingReader to read the
			repository mapping and the synchronization info.
		</description>
		<property name="jdbcConnection" ref="JdbcConnectionQC2TF" />
		<!--
			batch size of 0 or less means process all rows in one message batch.
		-->
		<!-- batch size of one means process one row per message and so on -->
		<property name="batchSize" value="1" />
		<property name="resultSetConverter" ref="ResultSetConverter" />
		<property name="sql">
			<value>${ccf.sql.queryrepositorymappings}</value>
		</property>
	</bean>
	<bean id="QC2TFGenericArtifactSchemaValidator" class="com.collabnet.ccf.core.utils.XmlValidator">
		<description>This processor validates whether the artifacts produced by the TF reader are generic artifact schema compliant.</description>
		<property name="schemaURL" value="config/genericartifactschema.xsd" />
	</bean>
	<bean id="TFTransformer" class="com.collabnet.ccf.core.transformer.DynamicXsltProcessor">
		<description>The xsltDir specifies the directory in which the xsl files are contained. The naming conventions
		for the xsl files need to be followed.
		Name of an xsl file should be: sourceSystem+sourceRepository+targetSystem+targetRepository.xsl
		</description>
		<property name="onlyAllowWhiteListedJavaFunctionCalls" value="true" />
		<property name="whiteListedJavaFunctionCalls">
			<list>
				<value>stringutil:encodeHTMLToEntityReferences(string(.))</value>
				<value>stringutil:stripHTML(string(.))</value>
			</list>
		</property>
		<property name="xsltDir" value="../../../fieldmappings/" />
		<property name="scripts">
		<list>
			<value>
			var artifactType = oa_data.selectSingleNode("@artifactType").getText();
			if (artifactType != "plainArtifact") {
				oa_data=null;
			}
			else {
				var fieldMappingDirectory = oa_data.selectSingleNode("@sourceRepositoryKind").getText();
				var fieldMappingKind = oa_data.selectSingleNode("@targetRepositoryKind").getText();
				if (fieldMappingKind == "MAPFORCE") {
					oa_data= fieldMappingDirectory + "GenericArtifactFormatToMapForce.xsl";
				} else if (fieldMappingKind == "MAPPING_RULES") {
					oa_data= fieldMappingDirectory + "preprocessingrules.xsl";
				}
				else {
					oa_data=null;
				}
			}
			</value>
			<value>
			var artifactType = oa_data.selectSingleNode("@artifactType").getText();
			if (artifactType != "plainArtifact") {
				oa_data=null;
			}
			else {
				var fieldMappingDirectory = oa_data.selectSingleNode("@sourceRepositoryKind").getText();
				var fieldMappingKind = oa_data.selectSingleNode("@targetRepositoryKind").getText();
				if (fieldMappingKind == "MAPFORCE") {
					oa_data= fieldMappingDirectory + "MapForceMain.xsl";
				} else if (fieldMappingKind == "MAPPING_RULES") {
					oa_data= fieldMappingDirectory + "rules.xsl";
				}
				else {
					oa_data=null;
				}
			}
			</value>
			<value>
			var artifactType = oa_data.selectSingleNode("@artifactType").getText();
			if (artifactType != "plainArtifact") {
				oa_data=null;
			}
			else {
				var fieldMappingDirectory = oa_data.selectSingleNode("@sourceRepositoryKind").getText();
				var fieldMappingKind = oa_data.selectSingleNode("@targetRepositoryKind").getText();
				if (fieldMappingKind == "MAPFORCE") {
					oa_data= fieldMappingDirectory + "MapForceToGenericArtifactFormat.xsl";
				}
				else if (fieldMappingKind == "MAPPING_RULES") {
					oa_data= fieldMappingDirectory + "postprocessingrules.xsl";
				}
				else if (fieldMappingKind == "CUSTOM_XSLT") {
					oa_data= fieldMappingDirectory + "custom.xsl";
				}
			}
			</value>
		</list>
		</property>
	</bean>
	<bean id="QCReader" class="com.collabnet.ccf.pi.qc.v90.QCReader">
		<description>
			This reader reads the modified artifacts in the QC system's tracker configured in the
			${qc.server.1.url} and the sync info tables. It reads all the related dependent artifact details
			and converts them into Generic Artifact XML document format and sends to the
			next component in the pipeline. The next component in the pipeline may be
			an XSLT transformer component such as com.collabnet.ccf.core.transformer.XsltProcessor
			or an EntityService component depending on the target TF tracker needs the data
			to be translated to fit into its fields or not.
		</description>
		<property name="CCF2xProcess" value="true" />
		<property name="serverUrl" value="${ccf.participant.qc.url}" />
		<property name="userName" value="${ccf.landscape.qc.username}" />
		<property name="password" value="${ccf.landscape.qc.password}" />
		<property name="connectionManager" ref="QCConnectionManager"></property>
		<property name="sleepInterval" value="${ccf.direction.sleepinterval}"></property>
		<property name="maxAttachmentSizePerArtifact" value="${ccf.direction.qc.max.attachmentsize}" />
		<!-- Let this restart every 6 hours -->
		<property name="autoRestartPeriod" value="${ccf.direction.autorestartperiod}" />
		<property name="shipAttachments" value="${ccf.direction.ship.attachments}" />		
		<!-- This plugs in the polling hospital -->
		<property name="hospitalDatabaseReader" ref="HospitalDatabaseExtractor" />
		<property name="nameOfEntityService" value="TFEntityService" />
		<!--
			Because QC sometimes reports incorrect attachment sizes if the
			attachment upload is still in progress, this property introduces a
			delay (in milliseconds, zero by default) before the attachment is
			downloaded. If you experience partial attachment downloads, please
			increase this value.
		-->
		<property name="delayBeforeAttachmentDownload" value="${ccf.direction.qc.delaybefore.attachment.download}" />
		<!-- Below property -"identityMappingDatabaseReader" makes reader to read all the comments and attachment;
			 Since CCF Sync is based on Artifact specific last modified timestamp or last modified version
		 -->		
		<property name="identityMappingDatabaseReader" ref="IndentityMappingDatabaseReaderQC2TF" /> 
		
		<!--
			Below property use to configure the maximum attachment retry count
			(count of five(5) by default) before the attachment is downloaded.
			Configurable with user defined value to reduce the multiple loops 
			in case of multiple same named zero byte attachments download
		-->
		<!-- <property name="maximumAttachmentRetryCount" value="5"></property> -->
		
		
	</bean>
	<bean id="QCConnectionManager" class="com.collabnet.ccf.core.eis.connection.ConnectionManager">
		<!-- Please set the number of connections to the number of project mappings you have -->
		<property name="maxConnectionsPerPool" value="5"></property>
		<property name="maxIdleTimeForConnection" value="600000" />
		<property name="scavengerInterval" value="120000"></property>
		<property name="connectionFactory" ref="QCConnectionFactory"></property>
		<property name="useStandardTimeoutHandlingCode" value="true" />
		<property name="enableReloginAfterSessionTimeout" value="true" />
		<property name="enableRetryAfterNetworkTimeout" value="true" />
	</bean>
	<bean id="QCConnectionFactory" class="com.collabnet.ccf.pi.qc.v90.QCConnectionFactory">
	</bean>
	<bean id="TFConnectionManager" class="com.collabnet.ccf.core.eis.connection.ConnectionManager">
		<description>
			The connection manager implements a connection pooling mechanism where the
			connections to multiple systems are cached for the readers and writers
			to retrieve when needed. Before returning the connection to the client
			the connection manager checks if the connection is live and only returns
			valid connections.
			It assigns and manages one pool per repository.
		</description>
		<!-- Please set the number of connections to the number of project mappings you have -->
		<property name="maxConnectionsPerPool" value="3"></property>
		<property name="maxIdleTimeForConnection" value="600000" />
		<property name="scavengerInterval" value="120000"></property>
		<property name="connectionFactory" ref="TFConnectionFactory"></property>
		<property name="useStandardTimeoutHandlingCode" value="true" />
		<property name="enableReloginAfterSessionTimeout" value="true" />
		<property name="enableRetryAfterNetworkTimeout" value="true" />
	</bean>
	<bean id="TFConnectionFactory" class="com.collabnet.ccf.teamforge.TFConnectionFactory">
		<description>
			This bean is an implementation of the com.collabnet.ccf.core.eis.connection.ConnectionFactory
			interface. It is responsible to create and close an connection for a given
			repository.
			In this case TFConnectionFactory manages TF connections
			objects.
		</description>
	</bean>
	<bean id="TFWriter" class="com.collabnet.ccf.teamforge.TFWriter">
		<description>
			This data processor is responsible for writing the artifacts coming from the
			EntitySerive into the target TF system.
			It converts/extracts the data from the Generic Artifact XML and pushes to the
			target TF system.
		</description>
		<property name="username" value="${ccf.landscape.tf.username}" />
		<property name="password" value="${ccf.landscape.tf.password}" />
		<property name="serverUrl" value="${ccf.participant.tf.url}" />
		<property name="updateComment" value="Synchronized by Connector user" />
		<property name="connectionManager" ref="TFConnectionManager"></property>
		<property name="translateTechnicalReleaseIds" value="false" />
		<property name="releaseIdFieldsContainFileReleasePackageName" value="${ccf.direction.qc.releaseIdfields.containfilerelease.packagename}" />
		<property name="packageReleaseSeparatorString" value="${ccf.direction.package.release.separator}" />
	</bean>
	<bean id="TFEntityService" class="com.collabnet.ccf.core.EntityService2">
		<description>
			This component is responsible for determining if the current artifact that is being
			shipped is to be created or updated in the target TF system. It determines the artifact
			action by checking if the artifact has an identity mapping already.
			If the identity mapping does not exist then the EntityService marks this artifact
			action as create otherwise update. Please refer the SynchronizationStatusAndIdentityMappingTableUpdater
			component.
		</description>
		<property name="identityMappingDatabaseReader" ref="IndentityMappingDatabaseReaderQC2TF" />
		<property name="hospitalDatabaseReader" ref="HospitalDatabaseReaderQC2TF" />
		<property name="parentIdentityMappingDatabaseReader" ref="ParentIndentityMappingDatabaseReaderQC2TF" />
		<property name="projectMappingDatabaseReader" ref="ProjectMappingDatabaseReaderQC2TF" />
		<property name="skipNewerVersionsOfQuarantinedArtifacts" value="false"/><property name="alwaysPassResynchedArtifacts" value="false"/>
		<property name="identityMapEventWaitCount" value="${ccf.direction.identityMapEventWaitCount}"></property>
		<property name="identityMapEventWaitTime" value="${ccf.direction.identityMapEventWaitTime}"></property>
		<property name="onlyQuarantineAttachmentIfParentInHospital" value="true"></property>
	</bean>
	<bean id="HospitalDatabaseReaderQC2TF"
		class="org.openadaptor.auxil.connector.jdbc.reader.JDBCReadConnector">
		<description>
			This database reader component finds out whether an artifact has been
			quarantined in the hospital
		</description>
		<property name="jdbcConnection" ref="JdbcConnectionQC2TF" />
		<!--
			batch size of 0 or less means process all rows in one message batch.
		-->
		<!-- batch size of one means process one row per message and so on -->
		<property name="batchSize" value="0" />
		<property name="sql">
			<value>${ccf.sql.checkifartifactisinhospital}</value>
		</property>
	</bean>
	<bean id="JdbcConnectionQC2TF" class="com.collabnet.ccf.core.db.JDBCConnection"
		scope="prototype">
		<description>
			This defines a jdbc connection that will be used
			by all components that read from QC and write to TF
		</description>
		<property name="driver" value="${ccf.db.driver}" />
		<property name="url" value="${ccf.db.url}" />
		<property name="username" value="${ccf.db.username}" />
		<property name="password" value="${ccf.db.password}" />
	</bean>
	<bean id="SynchronizationStatusAndIdentityMappingTableUpdaterQC2TF"
		class="com.collabnet.ccf.core.config.MappingDBUpdater2">
		<description>
			This component is responsible for creating the identity mapping for newly created
			artifacts in the target system. It also updates the synchronization status for a
			particular repository. For TF systems the synchronization info is the last
			modified time of the last shipped artifact.
			If the EntityService determines the artifact action as create (that is this artifact
			is a new artifact in the source system and doesn't have its identity mapping filled
			in the Sync info tables) then the writer component creates the artifact in the target
			system and populates the target artifact id in the Generic Artifact XML.
			The SynchronizationStatusAndIdentityMappingTableUpdater then takes the target artifact
			id and creates an identity mapping entry for the source and target artifact ids.
		</description>
		<property name="synchronizationStatusDatabaseUpdater" ref="SynchronizationStatusDatabaseUpdaterQC2TF"></property>
		<property name="identityMappingDatabaseReader" ref="IndentityMappingDatabaseReaderQC2TF" />
		<property name="identityMappingDatabaseUpdater" ref="IdentityMappingDatabaseUpdaterQC2TF" />
		<property name="identityMappingDatabaseInserter" ref="IdentityMappingDatabaseInserterQC2TF" />
		<property name="sourceSystemIsTeamForge" value="false" />
	</bean>
	<bean id="ResultSetConverter"
		class="org.openadaptor.auxil.connector.jdbc.reader.xml.ResultSetToXMLConverter">
		<property name="convertToString" value="false" />
		<property name="useColumnLabels" value="true" />
		<property name="rootElement" value="EmptySyncInf" />
	</bean>
	<bean id="IdentityMappingDatabaseInserterQC2TF"
		class="org.openadaptor.auxil.connector.jdbc.writer.JDBCWriteConnector">
		<description>
			This component updates the synchronization status for the current artifact.
		</description>
		<property name="writer" ref="IdentityMappingTableInserter"></property>
		<property name="jdbcConnection" ref="JdbcConnectionQC2TF">
		</property>
	</bean>
	<bean id="IdentityMappingTableInserter"
		class="org.openadaptor.auxil.connector.jdbc.writer.map.MapTableWriter">
		<description>
			This is the writer object that writes the artifact mapping
			information into the database table.
		</description>
		<property name="tableName" value="IDENTITY_MAPPING"></property>
		<property name="outputColumns">
			<list>
				<value>REPOSITORY_MAPPING</value>
				<value>VERSION</value>
				<value>DESCRIPTION</value>
				<value>SOURCE_ARTIFACT_ID</value>
				<value>TARGET_ARTIFACT_ID</value>
				<value>SOURCE_LAST_MODIFICATION_TIME</value>
				<value>TARGET_LAST_MODIFICATION_TIME</value>
				<value>SOURCE_ARTIFACT_VERSION</value>
				<value>TARGET_ARTIFACT_VERSION</value>
				<value>ARTIFACT_TYPE</value>
				<value>DEP_CHILD_SOURCE_ARTIFACT_ID</value>
				<value>DEP_CHILD_SOURCE_REPOSITORY_ID</value>
				<value>DEP_CHILD_SOURCE_REPOSITORY_KIND</value>
				<value>DEP_CHILD_TARGET_ARTIFACT_ID</value>
				<value>DEP_CHILD_TARGET_REPOSITORY_ID</value>
				<value>DEP_CHILD_TARGET_REPOSITORY_KIND</value>
				<value>DEP_PARENT_SOURCE_ARTIFACT_ID</value>
				<value>DEP_PARENT_SOURCE_REPOSITORY_ID</value>
				<value>DEP_PARENT_SOURCE_REPOSITORY_KIND</value>
				<value>DEP_PARENT_TARGET_ARTIFACT_ID</value>
				<value>DEP_PARENT_TARGET_REPOSITORY_ID</value>
				<value>DEP_PARENT_TARGET_REPOSITORY_KIND</value>
			</list>
		</property>
	</bean>
	<bean id="IndentityMappingDatabaseReaderQC2TF"
		class="org.openadaptor.auxil.connector.jdbc.reader.JDBCReadConnector">
		<description>
			This database reader component reads the target artifact id from the databse
			for a given source artifact id and the target repository and system information.
		</description>
		<property name="jdbcConnection" ref="JdbcConnectionQC2TF" />
		<!--
			batch size of 0 or less means process all rows in one message batch.
		-->
		<!-- batch size of one means process one row per message and so on -->
		<property name="batchSize" value="0" />
		<property name="sql">
			<value>${ccf.sql.queryidentitymappings}</value>
		</property>
	</bean>
	<bean id="ParentIndentityMappingDatabaseReaderQC2TF"
		class="org.openadaptor.auxil.connector.jdbc.reader.JDBCReadConnector">
		<description>
			This database reader component reads the target artifact id from the databse
			for a given source artifact id and the target repository and system information.
		</description>
		<property name="jdbcConnection" ref="JdbcConnectionQC2TF" />
		<!--
			batch size of 0 or less means process all rows in one message batch.
		-->
		<!-- batch size of one means process one row per message and so on -->
		<property name="batchSize" value="0" />
		<property name="sql">
			<value>${ccf.sql.queryparentidentitymappings}</value>
		</property>
	</bean>
	
	<bean id="ProjectMappingDatabaseReaderQC2TF"
		class="org.openadaptor.auxil.connector.jdbc.reader.JDBCReadConnector">
		<description>
			This database reader component reads the project mappings for the parent artifact's repository id
		</description>
		<property name="jdbcConnection"
			ref="JdbcConnectionQC2TF" />
		<!-- batch size of 0 or less means process all rows in one message batch. -->
		<!-- batch size of one means process one row per message and so on -->
		<property name="batchSize" value="0" />
		<property name="sql">
			<value>${ccf.sql.checkifparentrepositorymappingexists}</value>
		</property>
	</bean>
	
	<bean id="IdentityMappingDatabaseUpdaterQC2TF"
		class="org.openadaptor.auxil.connector.jdbc.writer.JDBCWriteConnector">
		<property name="writer" ref="IdentityMappingTableUpdater"></property>
		<property name="jdbcConnection" ref="JdbcConnectionQC2TF">
		</property>
	</bean>
	<bean id="IdentityMappingTableUpdater" class="com.collabnet.ccf.core.db.MapTableUpdater">
		<description>
			This is the writer object that writes the artifact mapping
			information into the database table.
		</description>
		<property name="tableName" value="IDENTITY_MAPPING"></property>
			<property name="sql"><value>${ccf.sql.updateidentitymappings}</value></property>
		<property name="outputColumns">
			<list>
				<value>SOURCE_LAST_MODIFICATION_TIME</value>
				<value>TARGET_LAST_MODIFICATION_TIME</value>
				<value>SOURCE_ARTIFACT_VERSION</value>
				<value>TARGET_ARTIFACT_VERSION</value>
				<value>REPOSITORY_MAPPING</value>
				<value>SOURCE_ARTIFACT_ID</value>
				<value>ARTIFACT_TYPE</value>
			</list>
		</property>
	</bean>
	<bean id="SynchronizationStatusDatabaseUpdaterQC2TF"
		class="org.openadaptor.auxil.connector.jdbc.writer.JDBCWriteConnector">
		<property name="writer" ref="SynchronizationStatusTableUpdater"></property>
		<property name="jdbcConnection" ref="JdbcConnectionQC2TF">
		</property>
	</bean>
	<bean id="SynchronizationStatusTableUpdater" class="com.collabnet.ccf.core.db.MapTableUpdater">
		<description>
			This is the writer object that writes the artifact mapping
			information into the database table.
		</description>
		<property name="tableName" value="REPOSITORY_MAPPING"></property>
        <property name="sql" value="${ccf.sql.updaterepositorymappings}"></property>
        <property name="outputColumns">
            <list>
                <value>LAST_SOURCE_ARTIFACT_MODIFICATION_DATE</value>
                <value>LAST_SOURCE_ARTIFACT_VERSION</value>
                <value>LAST_SOURCE_ARTIFACT_ID</value>
                <value>REPOSITORY_MAPPING_DIRECTION</value>
                <value>LAST_SOURCE_ARTIFACT_VERSION</value>
            </list>
        </property>
	</bean>
	
	<!-- Following components are for polling hospital -->
	<bean id="HospitalUpdatorSQLConverterFixed" class="org.openadaptor.auxil.processor.script.ScriptProcessor">
		<description>
			This defines the SQL update statement to delete the
			hospital data base for replayed artifacts.
		</description>
		<!--
			<property name="script"> <value>oa_data = "UPDATE HOSPITAL_ENTRY SET FIXED
			= TRUE WHERE ID = " +
			oa_data.getRootElement().selectSingleNode("@transactionId").getText();</value> </property>
		-->
		<property name="script">
			<value>
			var transactionId = oa_data.getRootElement().selectSingleNode("@transactionId").getText();
			if (transactionId == "unknown") transactionId = "-1";
			oa_data = "DELETE FROM HOSPITAL_ENTRY WHERE ID = " + transactionId;
			</value>
		</property>
	</bean>
	<bean id="HospitalUpdatorSQLConverterReprocessed" class="org.openadaptor.auxil.processor.script.ScriptProcessor">
		<description>
			This defines the SQL update statement to update the
			hospital data base.
		</description>
		<property name="script">
			<value>
			var transactionId = oa_data.getRootElement().selectSingleNode("@transactionId").getText();
			if (transactionId == "unknown") transactionId = "-1";
			oa_data = "UPDATE HOSPITAL_ENTRY SET REPROCESSED = TRUE WHERE ID = " + transactionId;
			</value>
		</property>
	</bean>
	<bean id="HospitalUpdator"
		class="org.openadaptor.auxil.connector.jdbc.writer.JDBCWriteConnector">
		<description>
			This component will update the hospitalized artifacts
		</description>
		<property name="jdbcConnection" ref="HospitalJDBCConnection" />
	</bean>
	<bean id="HospitalDatabaseExtractor"
		class="org.openadaptor.auxil.connector.jdbc.reader.JDBCReadConnector">
		<description>
			This database reader component extracts quarantined artifacts from
			the hospital that are ready to be replayed
		</description>
		<property name="jdbcConnection" ref="HospitalJDBCConnection" />
		<!-- batch size of one means process one row per message and so on -->
		<property name="batchSize" value="0" />
		<property name="sql">
			<value>SELECT ID, GENERIC_ARTIFACT, ORIGINATING_COMPONENT FROM HOSPITAL_ENTRY WHERE REPROCESSED = FALSE AND ERROR_CODE = 'replay' AND REPOSITORY_MAPPING_DIRECTION = ? ORDER BY ID ASC LIMIT 1</value>
		</property>
	</bean>
	
	<bean id="mBeanExporter" class="org.springframework.jmx.export.MBeanExporter">
		<property name="beans">
			<map>
				<entry key="CCF:name=AbstractReader" value-ref="QCReader"/>
			</map>
		</property>
		<property name="assembler" ref="assembler"/>
	</bean>
	
	<bean id="assembler" class="org.springframework.jmx.export.assembler.MethodNameBasedMBeanInfoAssembler">
		<property name="managedMethods">
			<list>
				<value>getNumberOfWaitingArtifacts</value>
			</list>
		</property>
	</bean>
	
	<bean id="ServiceWrapperBean" class="org.tanukisoftware.wrapper.jmx.WrapperManager" />
	
</beans>