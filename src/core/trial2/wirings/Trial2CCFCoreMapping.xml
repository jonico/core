<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">
 
  <description><![CDATA[
  Simple test wiring to write out the first generic artifact!
  ]]></description>
  
  <bean class="org.openadaptor.core.jmx.MBeanServer">
    <description>Embed this in your config to expose jmx interface via http and rmi.</description>
    <constructor-arg value="8082"/>
  </bean>
  
  <bean id="SystemUtil" class="org.openadaptor.util.SystemUtil">
    <description>Embed this in your config to expose useful management bean.</description>
  </bean>
  
  <bean id="LogAdmin" class="org.openadaptor.thirdparty.log4j.LogAdmin">
    <description>Embed this in your config to expose log4j management.</description>
  </bean>
  
  <bean id="Adaptor" class="org.openadaptor.core.adaptor.Adaptor">
    <property name="messageProcessor" ref="Router"/>
  </bean>
  
  <bean id="Router" class="org.openadaptor.core.router.Router">
    
    <property name="processMap">
      <map>
            <!-- There will be multiple entries like below, each in one thread -->
			<entry key-ref="SimplePollingReader" value-ref="QC1Reader"/>
			
			<!-- There will be multiple Filters like below, one for each writer -->
            <!--  <entry key-ref="QC1Reader" value-ref="SFEE1Filter"/> -->
            <entry key-ref="QC1Reader" value-ref="SFEE1Transformer"/>

            <!-- There will be one transformer per filter -->
            <!--  <entry key-ref="SFEE1Filter" value-ref="SFEE1Transformer"/> -->

            <!-- There will be one entity service per transformer -->
            <entry key-ref="SFEE1Transformer" value-ref="SFEE1EntityService"/>

            <!-- There will be one writer per entity service -->
            <entry key-ref="SFEE1EntityService" value-ref="SFEE1Filter"/>
            <entry key-ref="SFEE1Filter" value-ref="SFEE1Writer"/>
            <!-- <entry key-ref="SFEE1EntityService" value-ref="SFEE1Writer"/> -->
            <entry key-ref="SFEE1Writer" value-ref="MappingDBUpdater"/>
      </map>  
    </property>
    <property name="exceptionProcessor" ref="ExceptionHandler"/>
    <property name="discardMap">
      <map>
      <!--    <entry key-ref="Filter" value-ref="DiscardLog"/> -->
      </map>
    </property>
  </bean>
  
   <bean id="SimplePollingReader" class="com.collabnet.ccf.core.test.plugins.SimpleLoopingPollingReadConnector">
     <description>
       Poller which wraps QCReader and every 5 seconds.
     </description>              
     <property name="pollLimit" value="-1"/>
     <property name="delegate" ref="CCFDatabaseReader"/>
     <property name="pollIntervalSecs" value="5"/>
  </bean>
   
  <bean id="CCFDatabaseReader" class="org.openadaptor.auxil.connector.jdbc.reader.JDBCReadConnector">
    <description>Reader which polls database using configured SQL.</description>
    <property name="jdbcConnection" ref="JdbcConnectionRead"/>
    <!-- batch size of 0 or less means process all rows in one message batch. -->
    <!-- batch size of one means process one row per message and so on -->
    <property name="batchSize" value="0"/>
    <property name="resultSetConverter" ref="QCResultSetConverter"/>
    <property name="sql">
      <value>
        select A.REPOSITORY_ID AS SOURCE_REPOSITORY_ID,
		A.REPOSITORY_KIND AS SOURCE_REPOSITORY_KIND,
		C.SYSTEM_ID AS SOURCE_SYSTEM_ID,
		C.SYSTEM_KIND AS SOURCE_SYSTEM_KIND,
		B.REPOSITORY_ID AS TARGET_REPOSITORY_ID,
		B.REPOSITORY_KIND AS TARGET_REPOSITORY_KIND,
		D.SYSTEM_ID AS TARGET_SYSTEM_ID,
		D.SYSTEM_KIND AS TARGET_SYSTEM_KIND,
		E.SOURCE_ARTIFACT_ID AS SOURCE_ARTIFACT_ID,
		E.TARGET_ARTIFACT_ID AS TARGET_ARTIFACT_ID,
	    REPOSITORY_MAPPING.LAST_READ_TIME AS FROM_TIME,
	    REPOSITORY_MAPPING.VERSION AS VERSION,
	    REPOSITORY_MAPPING.TRANSACTION_ID AS TRANSACTION_ID
		from REPOSITORY_INFO A,REPOSITORY_INFO B, SYSTEM_INFO C, SYSTEM_INFO D, ARTIFACT_MAPPING E, REPOSITORY_MAPPING 
		WHERE REPOSITORY_MAPPING.SOURCE_REPOSITORY_INFO_ID = A.ID AND
		REPOSITORY_MAPPING.TARGET_REPOSITORY_INFO_ID = B.ID AND
		A.SYSTEM_INFO_ID = C.ID AND
		B.SYSTEM_INFO_ID = D.ID AND
		REPOSITORY_MAPPING.ID = E.MAPPING_ID
      </value>
    </property>
  </bean>

  <bean id="JdbcConnectionRead" class="org.openadaptor.auxil.connector.jdbc.JDBCConnection">
    <description>This defines jdbc connection.</description>
    <property name="driver" value="org.hsqldb.jdbcDriver"/>
    <property name="url" value="jdbc:hsqldb:hsql://localhost/xdb"/>
    <property name="username" value="sa"/>
    <property name="password" value=""/>
  </bean>

  <bean id="QCResultSetConverter" class="org.openadaptor.auxil.connector.jdbc.reader.xml.ResultSetToXMLConverter">
    <property name="convertToString" value="false"/>
    <property name="rootElement" value="EmptySyncInf"/>  
  </bean>
  
   <bean id="QC1Reader" class="trial2.QCReaderTrial2">
     <description>
       Reads the modified defects from QC
     </description>              
     <property name="serverUrl" value="http://10.2.1.114:8080/qcbin"/>
     <property name="domain" value="DOMAIN_PRJ_1"/>
     <property name="projectName" value="PRJ_1"/>
     <property name="userName" value="admin"/>
     <property name="password" value="collabnet"/>
   </bean>

  <!-- use this later, for now let all records pass through -->
  <!-- 
  <bean id="SFEE1Filter"
        class="org.openadaptor.auxil.processor.script.ScriptFilterProcessor">
        <description>Discard records that are Joker cards.</description>
        <property name="scriptProcessor">
            <bean
                class="org.openadaptor.auxil.processor.script.MapScriptProcessor">
                <property name="script" value="pips == 'joker'" />
            </bean>
        </property>
  </bean>
   -->
   <bean id="SFEE1Filter"
        class="trial2.XPathFilter">
        <description>Discard documents that don't have target system kind SFEE4.4</description>
        <property name="XPath" value="/artifact[@targetSystemKind='SFEE4.4']" />
  </bean>
   
  <bean id="SFEE1Transformer" class="trial2.XsltProcessor">
   <property name="xsltFile" value="../xslts/qc2sfee.xsl"/>
  </bean>

   <bean id="SFEE1EntityService" class="trial2.SFEEEntityServiceTrial2">
     <description>
       In actuality should fill in the target artifact id if possible
       Over here, it sets this with a dummy value calculated from the
       values of the input generic artifact params
     </description>              
     <property name="serverUrl" value="http://10.2.1.114:8080/qcbin"/>
     <property name="domain" value="DOMAIN_PRJ_1"/>
     <property name="projectName" value="PRJ_1"/>
     <property name="userName" value="admin"/>
     <property name="password" value="collabnet"/>
   </bean>

   <bean id="SFEE1Writer" class="trial2.SFEEWriterTrial2">
     <description>
       Simply display the artifacts
     </description>              
     <property name="serverUrl" value="http://10.2.1.114:8080/qcbin"/>
     <property name="domain" value="DOMAIN_PRJ_1"/>
     <property name="projectName" value="PRJ_1"/>
     <property name="userName" value="admin"/>
     <property name="password" value="collabnet"/>
   </bean>
   <bean id="MappingDBUpdater" class="trial2.MappingDBUpdater">
     <description>
       Simply display the artifacts
     </description>              
     <property name="jdbcConnection" ref="JdbcConnectionRead"/>
   </bean>
   

  <!-- <bean id="ExceptionHandler" class="org.openadaptor.auxil.connector.iostream.writer.FileWriteConnector"/> -->
  <bean id="ExceptionHandler" class="trial2.Ambulance">
  	<property name="hospitalFileName" value="C:/hospital.txt"/>
  </bean>

</beans>
